<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>极速搭建自动化指数估值系统</title>
      <link href="/2020/05/05/%E6%9E%81%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8C%87%E6%95%B0%E4%BC%B0%E5%80%BC%E7%B3%BB%E7%BB%9F/"/>
      <url>/2020/05/05/%E6%9E%81%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8C%87%E6%95%B0%E4%BC%B0%E5%80%BC%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>None!!!</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> 量化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 量化 </tag>
            
            <tag> pyhotn </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>量化定投，工薪族逆袭之路</title>
      <link href="/2020/05/04/%E9%87%8F%E5%8C%96%E5%AE%9A%E6%8A%95%EF%BC%8C%E5%B7%A5%E8%96%AA%E6%97%8F%E9%80%86%E8%A2%AD%E4%B9%8B%E8%B7%AF/"/>
      <url>/2020/05/04/%E9%87%8F%E5%8C%96%E5%AE%9A%E6%8A%95%EF%BC%8C%E5%B7%A5%E8%96%AA%E6%97%8F%E9%80%86%E8%A2%AD%E4%B9%8B%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1588578534929&di=510f0273873d8db6b58502f42b3d4022&imgtype=0&src=http%3A%2F%2Fgbres.dfcfw.com%2Ffiles%2Fpicture%2F20190829%2F91bfb5999ea82729dbdaf5752b9ab31e_w1267h527.png" alt=""></p><blockquote><p>一个人一生能积累多少钱，不是取决于他能够赚多少钱，而是取决于他如何投资理财，人找钱不如钱找钱，要知道让钱为你工作，而不是你为钱工作。——（美）沃伦●巴菲特</p></blockquote><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入常用的库</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"><span class="keyword">import</span> datetime <span class="keyword">as</span> dt</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> jqdata <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> tushare <span class="keyword">as</span> ts</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">plt.style.use(<span class="string">'fivethirtyeight'</span>)</span><br></pre></td></tr></table></figure><h2 id="一、指数格局，跌宕起伏"><a href="#一、指数格局，跌宕起伏" class="headerlink" title="一、指数格局，跌宕起伏"></a>一、指数格局，跌宕起伏</h2><p>这里的指数，我们重点说一下上证指数、深圳指数。指数其实是一篮子股票，它反应的这些股票总体的表现。而上证与深圳指数更反应出当下国内的经济形式（当然不是百分百的呈现）。</p><p>相信大家都了解过经济周期，理论上，社会环境的经济会以<strong>衰退－萧条－复苏－繁荣</strong>四种形式往复呈现。不过，由于不同国家的国情不尽相同，这种周而复始的周期曲线表现得并不完美。</p><p>下图为经济周期曲线图：</p><p><img src="https://cdn.jsdelivr.net/gh/mrshiqiqi/resource/lhdt_%E7%BB%8F%E6%B5%8E%E5%91%A8%E6%9C%9F.png" alt=""></p><p>那么，股市是否也会呈现一定的周期性呢？如果具有周期性，如何估算牛熊之间的时间距离呢？带着这样的疑问，接着往下探究。</p><p>在探究此问题之前，可以去查找一下相关的历史资料，看看是否有人已经给出答案，或者可以找一些重要的线索。经过百度，收集到：上证指数<strong>1990年12月19号</strong>成立，之后的经历了<strong>4次</strong>牛市，分别<strong>1993年2月、2001年6月、2007年10月、2015年6月</strong>。让我们来实际看一下上证指数全部的趋势情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">plt.style.use(<span class="string">'fivethirtyeight'</span>)</span><br><span class="line"><span class="comment"># 由于数据量比较多，这里打算从 tushare 获取上证指数所有的价格数据</span></span><br><span class="line"><span class="comment"># tushare 接口，参数为注册时生成的 token</span></span><br><span class="line">pro = ts.pro_api(<span class="string">'xxxxxxxxx'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tushare 要求一次最多获取 3000 条数据，所以分两次获取</span></span><br><span class="line"><span class="comment"># 然后将数据合并，按时间排序</span></span><br><span class="line">df1 = pro.index_daily(ts_code=<span class="string">'000001.SH'</span>, </span><br><span class="line">                      start_date=<span class="string">'19901219'</span>, </span><br><span class="line">                      end_date=<span class="string">'20101231'</span>)</span><br><span class="line">df2 = pro.index_daily(ts_code=<span class="string">'000001.SH'</span>, </span><br><span class="line">                      start_date=<span class="string">'20110101'</span>, </span><br><span class="line">                      end_date=<span class="string">'20190630'</span>)</span><br><span class="line">df = pd.concat([df2, df1])  <span class="comment"># 合并</span></span><br><span class="line">df = df.sort_values(by=[<span class="string">'trade_date'</span>])  <span class="comment"># 排序</span></span><br><span class="line">df[<span class="string">'trade_date'</span>] = pd.to_datetime(df[<span class="string">'trade_date'</span>])  <span class="comment"># 转换为时间类型</span></span><br><span class="line">df.set_index([<span class="string">'trade_date'</span>], inplace=<span class="literal">True</span>)  <span class="comment"># 设置索引列</span></span><br><span class="line">df.index.name = <span class="literal">None</span>  <span class="comment"># 去掉索引列名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将上证指数价格曲线画出来</span></span><br><span class="line"><span class="comment"># 并在对应的牛市年份，画一条竖线来标记</span></span><br><span class="line">df.close.plot(figsize=(<span class="number">14</span>, <span class="number">7</span>), title=<span class="string">'牛顶间隔展示'</span>)</span><br><span class="line"><span class="keyword">for</span> year <span class="keyword">in</span> [<span class="string">'1993-02-01'</span>, <span class="string">'2001-06-01'</span>, </span><br><span class="line">             <span class="string">'2007-10-01'</span>, <span class="string">'2015-06-01'</span>]:</span><br><span class="line">    plt.axvline(year,color=<span class="string">'r'</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/mrshiqiqi/resource/lhdt_output_3_0.png" alt=""></p><p>看完这张图，大概大家都会感慨：曾经的股市是多么的疯狂，它也像人生，起起伏伏。粗一看，感觉指数的起伏是有一定的周期性规律可寻的，但仔细看却发现，各牛市间的时间间隔并不匀称。那问题来了，各牛市顶点的时间间隔大概在什么样的取值范围呢？未来大盘的趋势是否会符合某种规律呢？接下来我们计算一下各牛顶时间节点的平均间隔时间与偏差。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转换成时间格式</span></span><br><span class="line">best_years = [dt.datetime.strptime(year, <span class="string">'%Y-%m-%d'</span>).date() </span><br><span class="line">              <span class="keyword">for</span> year <span class="keyword">in</span> [<span class="string">'1993-02-01'</span>, <span class="string">'2001-06-01'</span>, </span><br><span class="line">                           <span class="string">'2007-10-01'</span>, <span class="string">'2015-06-01'</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算牛顶时间间隔</span></span><br><span class="line">gap_year = [days.days <span class="keyword">for</span> days <span class="keyword">in</span> np.diff(best_years)]</span><br><span class="line">print(<span class="string">'牛顶平均间隔时间：'</span>, [<span class="string">'&#123;&#125; days'</span>.format(days) <span class="keyword">for</span> days <span class="keyword">in</span> gap_year])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算平均间隔年数，为避免盲目猜测，再计算出均值的偏差值</span></span><br><span class="line">mean_gap = np.mean(gap_year)</span><br><span class="line">print(<span class="string">'平均时间间隔 &#123;&#125; 天，即 &#123;&#125; 年'</span>.format(round(mean_gap, <span class="number">2</span>), round(mean_gap / <span class="number">365</span>, <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算平均时间间隔偏差值</span></span><br><span class="line">std_gap = np.std(gap_year)</span><br><span class="line">print(<span class="string">'平均时间间隔偏差 &#123;&#125; 天，即 &#123;&#125; 年'</span>.format(round(std_gap, <span class="number">2</span>), round(std_gap / <span class="number">365</span>, <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算下一个牛市出现的合理时间区间</span></span><br><span class="line">early_year = (best_years[<span class="number">-1</span>] + dt.timedelta(round(mean_gap - std_gap, <span class="number">0</span>)))</span><br><span class="line">latest_year = (best_years[<span class="number">-1</span>] + dt.timedelta(round(mean_gap + std_gap, <span class="number">0</span>)))</span><br><span class="line"><span class="comment"># 构造 title</span></span><br><span class="line">early_y = early_year.year</span><br><span class="line">early_m = early_year.month</span><br><span class="line">latest_y = latest_year.year</span><br><span class="line">latest_m = latest_year.month</span><br><span class="line">print(<span class="string">'下个牛顶时间范围 &#123;&#125;年&#123;&#125;月 ~ &#123;&#125;年&#123;&#125;月'</span>.format(early_y, early_m, latest_y, latest_m))</span><br></pre></td></tr></table></figure><pre><code>牛顶平均间隔时间： [&apos;3042 days&apos;, &apos;2313 days&apos;, &apos;2800 days&apos;]平均时间间隔 2718.33 天，即 7.45 年平均时间间隔偏差 303.16 天，即 0.83 年下个牛顶时间范围 2022年1月 ~ 2023年9月</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">title = <span class="string">'评估下个牛顶时间范围 &#123;&#125;年&#123;&#125;月 ~ &#123;&#125;年&#123;&#125;月'</span>.format(early_y, early_m, latest_y, latest_m)</span><br><span class="line">df.close.plot(figsize=(<span class="number">14</span>, <span class="number">7</span>), title=title)</span><br><span class="line"><span class="keyword">for</span> year <span class="keyword">in</span> [<span class="string">'1993-02-01'</span>, <span class="string">'2001-06-01'</span>, </span><br><span class="line">             <span class="string">'2007-10-01'</span>, <span class="string">'2015-06-01'</span>]:</span><br><span class="line">    plt.axvline(year,color=<span class="string">'r'</span>, alpha=<span class="number">0.6</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 生成 2019-02-11 ~ 2023-12-10 的时间区间</span></span><br><span class="line"><span class="comment"># 如果要填充一个区间，y 就给价格的最大值便好</span></span><br><span class="line">date_span = pd.date_range(early_year, latest_year)</span><br><span class="line">value_span = [df.close.max() <span class="keyword">for</span> x <span class="keyword">in</span> date_span]</span><br><span class="line">plt.fill_between(date_span, value_span, color=<span class="string">'orange'</span>, alpha=<span class="number">0.8</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/mrshiqiqi/resource/lhdt_output_6_0.png" alt=""></p><p>这里需要提醒一下大家：历史数据只可用来评估一些现象，但绝不能 100% 预言未来！所以大家还要带着辩证的心态看待这个结果。</p><p><strong>通过上面的统计与可视化，可得出以下结论：</strong></p><ol><li>一轮牛熊的平均时间间隔为7.5年左右；</li><li>4轮牛熊的时间偏差在0.8年左右；</li><li>依此估算的下个牛顶的时间范围在2022年1月 ~ 2023年9月之间。</li></ol><p>假设这个结果是大概率可信的，那在到达牛顶之前，一定要经过一个牛市的启动阶段——所以，低估值与熊之尾巴才是最宝贵的！！！</p><h2 id="二、定投畅想，看好国运"><a href="#二、定投畅想，看好国运" class="headerlink" title="二、定投畅想，看好国运"></a>二、定投畅想，看好国运</h2><p>指数的价格一直在波动起伏，但从宏观看来，其底部是一直在抬高的。只要国家经济一直是向好的，那指数的从超长期来看，是总体向上发展的。<strong>也就是说，买指数产品，就是看好国运！</strong></p><p>例如下图，通过线性回归，我们可以看出，上证指数的价格整体趋势是向上的。假如在上证指数成立之初我们就买入，并一直持有到现在，到目前为止的收益将是多少呢？我们来做个计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过线性回归，刻画整体平均趋势</span></span><br><span class="line">plt.figure(figsize=(<span class="number">14</span>, <span class="number">7</span>))</span><br><span class="line">sns.regplot(x=np.arange(<span class="number">0</span>, df.shape[<span class="number">0</span>]), y=df.close.values)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/mrshiqiqi/resource/lhdt_output_9_0.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为了计算方便，默认都倩收盘价格为准</span></span><br><span class="line"><span class="comment"># 获取上市第一天的收盘价和当前收盘价</span></span><br><span class="line">start_price = df.close[<span class="number">0</span>]</span><br><span class="line">end_price = df.close[<span class="number">-1</span>]</span><br><span class="line">print(<span class="string">'最初收盘价为 &#123;&#125;，当前收盘价为 &#123;&#125;'</span>.format(start_price, end_price))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算收益率</span></span><br><span class="line">total_return = (end_price / start_price) - <span class="number">1</span></span><br><span class="line">print(<span class="string">'持有到目前为止的收益率为 &#123;&#125;%'</span>.format(round(total_return * <span class="number">100</span>, <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算年平均收益，一年以250个交易日为准</span></span><br><span class="line"><span class="comment"># 平均年化收益率=(投资内收益/本金)×（250/投资天数）× 100%</span></span><br><span class="line">mean_return = total_return * (<span class="number">250</span> / df.shape[<span class="number">0</span>])</span><br><span class="line">print(<span class="string">'平均每年收益率为 &#123;&#125;%'</span>.format(round(mean_return * <span class="number">100</span>, <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算年化收益率复利</span></span><br><span class="line"><span class="comment"># 本息和 = 本金 * （年化利率 + 1）的 n 次方，n为交易年数</span></span><br><span class="line"><span class="comment"># 年化利率 = （本息和 / 本金）的 n次开根 - 1</span></span><br><span class="line">annualized_return = pow((end_price / start_price), <span class="number">1</span> / (df.shape[<span class="number">0</span>] / <span class="number">250</span>)) - <span class="number">1</span></span><br><span class="line">print(<span class="string">'年化收益率为 &#123;&#125;%'</span>.format(round(annualized_return * <span class="number">100</span>, <span class="number">2</span>)))</span><br></pre></td></tr></table></figure><pre><code>最初收盘价为 99.98，当前收盘价为 2978.8784持有到目前为止的收益率为 2879.47%平均每年收益率为 103.22%年化收益率为 12.94%</code></pre><p>看到这里，可能小伙伴们都张大了嘴大喊：“这不可能！我不相信！”是的，12.9% 的年化复利，的确很夸张。但这并不是表明指数收益相当可观，这其中的原因是：</p><ol><li>指数刚上市的时候净值很低；</li><li>中国的经济已经发生了天翻地覆的变化；</li><li>持有的时间相对长；</li><li>没有考虑通货膨胀与金钱的时间价值。</li></ol><p><strong>现在我们已经知道，指数从长期来看是持续向上发展的，而在指数投资中，越早投资获得的收益越好。但对于大部分的式蒺族来说，大家的理财理念并没有得到较好的普及，况且投资是一项需要承担较高风险的活动，许多工薪族朋友只能看着自己的钱包在非理性消费与通货膨胀的影响下不断的缩水。有些拥有比较好的习惯的工薪族会将部分收入储蓄到银行卡中，但仍旧逃不过金钱被贬值的命运！</strong></p><p><strong>其实，工薪族如果了解“定投”这个概念的话，是可以将一部分的资金从银行卡里拿出来定期存到指数投资产品中的。如果去百度定投的概念，那么会出现一些关键字，比如“低估值”，“风险平摊”，“定期定额度”，“微笑曲线”等，如果对于定投不太了解，可以先去百度一下定投的理念。</strong></p><p>接下来，我们构建一个以定期定额方式投资指数的模型，看看最终的投资效果如何。</p><p><strong>模型描述：</strong></p><ol><li>最早日期选定在上证指数公布的那一天；</li><li>每月的第一个交易日买入上证指数1000元；</li><li>假设指数的净值已经缩小到个位数,即 1000 元可以正常交易；</li><li>持有到现在，没有卖出。</li></ol><p>本模型不考虑交易费用与滑点，默认每次的投入本金都可以全部买进！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取每个月的第一个交易日的数据</span></span><br><span class="line">first_day = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(df)):</span><br><span class="line">    date = df.index[i]</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">        first_day.append(date)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        last_date = df.index[i - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> date.day &lt; last_date.day:</span><br><span class="line">            first_day.append(date)</span><br><span class="line">            </span><br><span class="line">index_df = df.loc[first_day]</span><br><span class="line">index_df.index</span><br></pre></td></tr></table></figure><pre><code>DatetimeIndex([&apos;1990-12-19&apos;, &apos;1991-01-02&apos;, &apos;1991-02-01&apos;, &apos;1991-03-01&apos;,               &apos;1991-04-01&apos;, &apos;1991-05-02&apos;, &apos;1991-06-03&apos;, &apos;1991-07-01&apos;,               &apos;1991-08-01&apos;, &apos;1991-09-02&apos;,               ...               &apos;2018-09-03&apos;, &apos;2018-10-08&apos;, &apos;2018-11-01&apos;, &apos;2018-12-03&apos;,               &apos;2019-01-02&apos;, &apos;2019-02-01&apos;, &apos;2019-03-01&apos;, &apos;2019-04-01&apos;,               &apos;2019-05-06&apos;, &apos;2019-06-03&apos;],              dtype=&apos;datetime64[ns]&apos;, length=343, freq=None)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照模型进行定投</span></span><br><span class="line">month_df = index_df.copy()</span><br><span class="line">month_df[<span class="string">'pct_change'</span>] = month_df[<span class="string">'close'</span>].pct_change()</span><br><span class="line">month_df = month_df[[<span class="string">'close'</span>, <span class="string">'pct_change'</span>]]  <span class="comment"># 按月整合数据</span></span><br><span class="line"></span><br><span class="line">save_money = []</span><br><span class="line">hold_money = []</span><br><span class="line">save_base = <span class="number">1000</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(month_df)):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">        save_money.append(save_base)</span><br><span class="line">        hold_money.append(save_base)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        save_money.append(save_money[<span class="number">-1</span>] + save_base)</span><br><span class="line">        hold_money.append(hold_money[<span class="number">-1</span>] * (<span class="number">1</span> + month_df[<span class="string">'pct_change'</span>][i]) + save_base)</span><br><span class="line"></span><br><span class="line">month_df[<span class="string">'save_money'</span>] = save_money</span><br><span class="line">month_df[<span class="string">'hold_money'</span>] = hold_money</span><br><span class="line">month_df.head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>close</th>      <th>pct_change</th>      <th>save_money</th>      <th>hold_money</th>    </tr>  </thead>  <tbody>    <tr>      <th>1990-12-19</th>      <td>99.98</td>      <td>NaN</td>      <td>1000</td>      <td>1000.000000</td>    </tr>    <tr>      <th>1991-01-02</th>      <td>128.84</td>      <td>0.288658</td>      <td>2000</td>      <td>2288.657732</td>    </tr>    <tr>      <th>1991-02-01</th>      <td>129.51</td>      <td>0.005200</td>      <td>3000</td>      <td>3300.559320</td>    </tr>    <tr>      <th>1991-03-01</th>      <td>132.53</td>      <td>0.023319</td>      <td>4000</td>      <td>4377.523950</td>    </tr>    <tr>      <th>1991-04-01</th>      <td>120.73</td>      <td>-0.089036</td>      <td>5000</td>      <td>4987.764781</td>    </tr>    <tr>      <th>1991-05-02</th>      <td>113.16</td>      <td>-0.062702</td>      <td>6000</td>      <td>5675.022468</td>    </tr>    <tr>      <th>1991-06-03</th>      <td>115.97</td>      <td>0.024832</td>      <td>7000</td>      <td>6815.945172</td>    </tr>    <tr>      <th>1991-07-01</th>      <td>136.85</td>      <td>0.180047</td>      <td>8000</td>      <td>9043.132679</td>    </tr>    <tr>      <th>1991-08-01</th>      <td>145.24</td>      <td>0.061308</td>      <td>9000</td>      <td>10597.549071</td>    </tr>    <tr>      <th>1991-09-02</th>      <td>180.22</td>      <td>0.240843</td>      <td>10000</td>      <td>14149.891858</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算定投、收益曲线</span></span><br><span class="line">month_df[<span class="string">'return_money'</span>] = month_df[<span class="string">'hold_money'</span>] - month_df[<span class="string">'save_money'</span>]</span><br><span class="line">month_df[[<span class="string">'save_money'</span>, <span class="string">'hold_money'</span>, <span class="string">'return_money'</span>]].plot(figsize=(<span class="number">14</span>, <span class="number">7</span>))</span><br><span class="line">plt.legend([<span class="string">'累积投入'</span>, <span class="string">'累积本息'</span>, <span class="string">'累积收入'</span>])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'累计投入: &#123;&#125;元'</span>.format(month_df[<span class="string">'save_money'</span>][<span class="number">-1</span>]))</span><br><span class="line">print(<span class="string">'累计收益: &#123;&#125;元'</span>.format(month_df[<span class="string">'return_money'</span>][<span class="number">-1</span>]))</span><br><span class="line">print(<span class="string">'最终本息累积: &#123;&#125;元'</span>.format(month_df[<span class="string">'hold_money'</span>][<span class="number">-1</span>]))</span><br><span class="line">print(<span class="string">'绝对收益率为: &#123;&#125;%'</span>.format((month_df[<span class="string">'return_money'</span>][<span class="number">-1</span>] / month_df[<span class="string">'save_money'</span>][<span class="number">-1</span>]) * <span class="number">100</span>))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/mrshiqiqi/resource/lhdt_output_14_0.png" alt=""></p><pre><code>累计投入: 343000元累计收益: 583956.3789768222元最终本息累积: 926956.3789768222元绝对收益率为: 170.24967317108522%</code></pre><h2 id="三、指数分析，知已知彼"><a href="#三、指数分析，知已知彼" class="headerlink" title="三、指数分析，知已知彼"></a>三、指数分析，知已知彼</h2><p>从上面的模型可以看出，如果尽早的定投，并且在低估的时候开始定投，随着国家的发展，指数的不断攀升，累积的总体收益也是一直在上升的。虽然总体收益率不是很高，但在2015的时候，总资金曾达到<strong>160万</strong>左右。</p><p>由于此模型没有卖出，因此在牛市疯狂的时候，没有到盈利落实到口袋中，而在市场最高的位置，也在不断的投入资金，这样便将定投的平均成本摊高了。</p><p>因此，接下来我们想解决的问题是，能否在指数位置偏低的时候持续定投，而在指数位置走到某种高度以上时持续卖出呢？那用什么指标来评判指数的高低位置呢？</p><p>了解点价值投资者的朋友，都应该听说过 <strong>PE 和 PB</strong>，它们可以用来评估标的价格是处于低估还是高估位置。因此，下面我们将 PE 和 PB 运用到指数上来，看看能否带来效果。</p><p>下面使用简单的中位数方式，求取指数每天的PE与PB。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从聚宽获取上证指数的信息</span></span><br><span class="line">index = <span class="string">'000001.XSHG'</span>  <span class="comment"># 指数 code</span></span><br><span class="line">index_info = get_security_info(index)  <span class="comment"># 指数信息</span></span><br><span class="line">start_date = index_info.start_date  <span class="comment"># 指数开始时间</span></span><br><span class="line">end_date = datetime.datetime.now().date()  <span class="comment"># 以当天为最后一天</span></span><br><span class="line">index_name = index_info.display_name  <span class="comment"># 指数全称</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，计算每天的成份股的平均pe/pb</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pe_pb</span><span class="params">(index_code, start_date, end_date)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">iter_pe_pb</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment"># 一个获取PE/PB的生成器</span></span><br><span class="line">        trade_date = get_trade_days(start_date=start_date, end_date=end_date)   </span><br><span class="line">        <span class="keyword">for</span> date <span class="keyword">in</span> trade_date:</span><br><span class="line">            stocks = get_index_stocks(index_code, date)</span><br><span class="line">            q = query(valuation.pe_ratio, </span><br><span class="line">                      valuation.pb_ratio</span><br><span class="line">                     ).filter(valuation.pe_ratio != <span class="literal">None</span>,</span><br><span class="line">                              valuation.pb_ratio != <span class="literal">None</span>,</span><br><span class="line">                              valuation.code.in_(stocks))</span><br><span class="line">            df = get_fundamentals(q, date)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 通过分位值进行过滤异常值</span></span><br><span class="line">            <span class="comment"># 这里并没有采用三倍标准差来去除极值，差异不大</span></span><br><span class="line">            quantile = df.quantile([<span class="number">0.25</span>, <span class="number">0.75</span>])</span><br><span class="line">            df_pe = df.pe_ratio[(df.pe_ratio &gt; quantile.pe_ratio.values[<span class="number">0</span>]) &amp;\</span><br><span class="line">                                (df.pe_ratio &lt; quantile.pe_ratio.values[<span class="number">1</span>])]</span><br><span class="line">            df_pb = df.pb_ratio[(df.pb_ratio &gt; quantile.pb_ratio.values[<span class="number">0</span>]) &amp;\</span><br><span class="line">                                (df.pb_ratio &lt; quantile.pb_ratio.values[<span class="number">1</span>])]</span><br><span class="line">            <span class="keyword">yield</span> date, df_pe.median(), df_pb.median()</span><br><span class="line"></span><br><span class="line">    dict_result = [&#123;<span class="string">'date'</span>: value[<span class="number">0</span>], <span class="string">'pe'</span>: value[<span class="number">1</span>], <span class="string">'pb'</span>:value[<span class="number">2</span>]&#125; <span class="keyword">for</span> value <span class="keyword">in</span> iter_pe_pb()]</span><br><span class="line">    df_result = pd.DataFrame(dict_result)</span><br><span class="line">    df_result.set_index(<span class="string">'date'</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> df_result</span><br><span class="line"></span><br><span class="line">df_pe_pb = get_pe_pb(index, start_date, end_date)</span><br><span class="line">df_pe_pb.head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>pb</th>      <th>pe</th>    </tr>    <tr>      <th>date</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2005-01-04</th>      <td>2.01585</td>      <td>26.53715</td>    </tr>    <tr>      <th>2005-01-05</th>      <td>2.04450</td>      <td>26.94350</td>    </tr>    <tr>      <th>2005-01-06</th>      <td>2.02165</td>      <td>26.61115</td>    </tr>    <tr>      <th>2005-01-07</th>      <td>2.02360</td>      <td>26.77050</td>    </tr>    <tr>      <th>2005-01-10</th>      <td>2.04630</td>      <td>26.94320</td>    </tr>    <tr>      <th>2005-01-11</th>      <td>2.05100</td>      <td>26.99430</td>    </tr>    <tr>      <th>2005-01-12</th>      <td>2.04245</td>      <td>26.78615</td>    </tr>    <tr>      <th>2005-01-13</th>      <td>2.06330</td>      <td>26.81250</td>    </tr>    <tr>      <th>2005-01-14</th>      <td>2.02760</td>      <td>26.63980</td>    </tr>    <tr>      <th>2005-01-17</th>      <td>1.96960</td>      <td>25.85190</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可视化PE/PB曲线图</span></span><br><span class="line">df_pe_pb.plot(figsize=(<span class="number">14</span>, <span class="number">7</span>), subplots=<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/mrshiqiqi/resource/lhdt_output_17_0.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将PE/PB趋势与指数趋势一起展示，以作观察</span></span><br><span class="line">_, axs = plt.subplots(ncols=<span class="number">2</span>, figsize=(<span class="number">14</span>, <span class="number">5</span>))</span><br><span class="line">close = get_price(index, start_date=start_date, end_date=end_date).close</span><br><span class="line">_df = pd.DataFrame()</span><br><span class="line">_df[<span class="string">'close'</span>] = close</span><br><span class="line">_df[<span class="string">'pe'</span>] = df_pe_pb.pe</span><br><span class="line">_df[<span class="string">'pb'</span>] = df_pe_pb.pb</span><br><span class="line">_df[[<span class="string">'close'</span>, <span class="string">'pe'</span>]].plot(secondary_y=[<span class="string">'pe'</span>], ax=axs[<span class="number">0</span>], alpha=<span class="number">.8</span>)</span><br><span class="line">_df[[<span class="string">'close'</span>, <span class="string">'pb'</span>]].plot(secondary_y=[<span class="string">'pb'</span>], ax=axs[<span class="number">1</span>], alpha=<span class="number">.8</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/mrshiqiqi/resource/lhdt_output_18_0.png" alt=""></p><p>如上图所示，可以看出，PE 与 PB 的大小会随着市场的起伏而呈现正相关性的波动。PE 的波动区间大概在 10 到 70 倍之间，而 PB 的波动范围大概在 0 到 7 之间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分析PE/PB数据分布情况</span></span><br><span class="line">_, axs = plt.subplots(nrows=<span class="number">2</span>, ncols=<span class="number">2</span>, figsize=(<span class="number">14</span>, <span class="number">7</span>))</span><br><span class="line">sns.distplot(df_pe_pb.pe, ax=axs[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">sns.boxplot(df_pe_pb.pe, ax=axs[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">sns.distplot(df_pe_pb.pb, ax=axs[<span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line">sns.boxplot(df_pe_pb.pb, ax=axs[<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/mrshiqiqi/resource/lhdt_output_20_0.png" alt=""></p><p>这里，通过上图的正态分布图与箱线图可以看出，PE 与 PB 有两个峰值，PE 的值主要集中在 24<del>39 倍区间，PB 的值主要集中在 2.1</del>3.6 倍之间。</p><p>另外，牛市顶时对就的 PE 与 PB 值数量相当少，并且与中间区间的值的距离相对比较远，以至于在箱线图上成为了离群点。通过这一点可以说明牛市顶一闪而过，时间非常短，产生的数据量也非常少。</p><p>整体来说，上图反应了中国股市熊长牛短的特点。因此，想要抓住牛市的机会，是需要而心等待的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 观察PE/PB之间的关系</span></span><br><span class="line">sns.jointplot(x=<span class="string">'pb'</span>,y=<span class="string">'pe'</span>, data=df_pe_pb, height=<span class="number">7</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/mrshiqiqi/resource/lhdt_output_22_0.png" alt=""></p><p>PE 与 PB 都可以用来对指数进行估值，那到底用哪个比较好呢？</p><p>但通过上图的散点图发现，本研究对应的 PE 与 PB 数据存在线性相关的数据，也就是说这两个指标大致上是同步涨同步跌的，因此，无论用 PE 还是 PB 来进行估值，效果都差不多，因此，接下将使用 PE 进行高位位置的判断。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将PE分成十个分位，查看各分位PE数量</span></span><br><span class="line">pe_array = df_pe_pb.pe.values</span><br><span class="line">value_counts = pd.cut(pe_array, <span class="number">10</span>).value_counts()</span><br><span class="line">print(value_counts)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">14</span>, <span class="number">4</span>))</span><br><span class="line">sns.barplot(x=np.arange(<span class="number">0</span>, len(value_counts)), </span><br><span class="line">            y=value_counts.values)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><pre><code>(15.708, 21.447]     248(21.447, 27.129]    1170(27.129, 32.811]     523(32.811, 38.492]     757(38.492, 44.174]     490(44.174, 49.856]     118(49.856, 55.538]     100(55.538, 61.219]     103(61.219, 66.901]      25(66.901, 72.583]      12dtype: int64</code></pre><p><img src="https://cdn.jsdelivr.net/gh/mrshiqiqi/resource/lhdt_output_24_1.png" alt=""></p><p>上图是将 PE 的值分成了 10 个分位，对每个分位 PE 的数量进行统计，可是以发现：</p><ol><li>第 2 个柱体是最高的，说明第 2 个 10 分位的 PE 数据量最多。</li><li>整体上来看，柱状图呈左偏形态，说明 PE 长时间处于 5 分位以下。</li><li>第 9 与第 10 个柱体代表的量少得可怜，说明高估值区的时间非常短。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 刻画PE整体趋势的中等分位区间（40%~60%）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_quantile</span><span class="params">()</span>:</span></span><br><span class="line">    _df = pd.DataFrame()</span><br><span class="line">    df = df_pe_pb.copy()</span><br><span class="line">    df.index.name = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    _df[<span class="string">'pe'</span>] = df.pe</span><br><span class="line">    _df = _df</span><br><span class="line">    p_high = [_df.pe.quantile(i / <span class="number">10.0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]] </span><br><span class="line">    <span class="keyword">for</span> p_h, i <span class="keyword">in</span> zip(p_high, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]):</span><br><span class="line">        _df[str(i / <span class="number">10</span> * <span class="number">100</span>)+<span class="string">'%'</span>] = p_h</span><br><span class="line"></span><br><span class="line">    low_p = _df[_df.pe &lt; _df.pe.iloc[<span class="number">-1</span>]]</span><br><span class="line">    quantile_now = low_p.shape[<span class="number">0</span>] / _df.shape[<span class="number">0</span>]  <span class="comment"># 当前百分位值</span></span><br><span class="line">    last_p = _df.pe[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    _df.plot(figsize=(<span class="number">14</span>, <span class="number">7</span>))</span><br><span class="line">show_quantile()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/mrshiqiqi/resource/lhdt_output_26_0.png" alt=""></p><p>上图将当前 PE 按时间序列进行可视化，并用三条线标出了 40%、50%、60% 分位的位置。再结合上面的统计，可以得出：</p><ul><li>低估区的数据数量为：2686</li><li>估值适中区的数据数量为：608</li><li>高估区的数据数量为：240</li></ul><p><strong>比值为 2684:608:240</strong>。<strong>低估区间的时间是高估区时间的11.19倍。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算比值</span></span><br><span class="line">low = value_counts[<span class="number">0</span>:<span class="number">4</span>].sum()</span><br><span class="line">medin = value_counts[<span class="number">4</span>:<span class="number">6</span>].sum()</span><br><span class="line">high = value_counts[<span class="number">6</span>:<span class="number">10</span>].sum()</span><br><span class="line">print(<span class="string">'比值(&#123;&#125;：&#123;&#125;：&#123;&#125;)'</span>.format(low, medin, high))</span><br></pre></td></tr></table></figure><pre><code>比值(2698：608：240)</code></pre><h2 id="四、模型构思，循序渐进"><a href="#四、模型构思，循序渐进" class="headerlink" title="四、模型构思，循序渐进"></a>四、模型构思，循序渐进</h2><p>由于PE/PB数据是从聚宽数据而来，最早的时间是2005年的数据，因此，相较于1990年的数据来说，数据量减少了不止一点。但不影响接下来的研究。</p><p>通过上面的分析，接下来提出的设想是：设定一个可参考的估值区，当小于该估值时，进行定投，反之则持续卖出。</p><p>上面我们已经计算出，PE 40 到 60 的估值范围为 32.811 ~ 49.856 之间，这里我们设定此区间为适中估值区间。</p><p>模型的描述如下：</p><ol><li>当 PE 处于适中估值区间时，不做任何操作；当月准备的定投金归入回收资金中。</li><li>当 PE 低于适中估值区间时，持续定投。</li><li>当 PE 高于适中估值区间时，持续卖出；卖出的金额与当月准备的定投金归入回收资金中。</li></ol><p>本模型不考虑交易费用与滑点，默认每次的投入本金都可以全部买进！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取每个月的第一个交易日</span></span><br><span class="line">first_day = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(df_pe_pb)):</span><br><span class="line">    date = df_pe_pb.index[i]</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">        first_day.append(date)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        last_date = df_pe_pb.index[i - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> date.day &lt; last_date.day:</span><br><span class="line">            first_day.append(date)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按月计算价格与涨跌幅度</span></span><br><span class="line">close = get_price(index, start_date=df_pe_pb.index[<span class="number">0</span>], end_date=df_pe_pb.index[<span class="number">-1</span>])[<span class="string">'close'</span>]</span><br><span class="line">df = df_pe_pb.copy()</span><br><span class="line">df[<span class="string">'close'</span>] = close</span><br><span class="line">df = df.loc[first_day]</span><br><span class="line">df[<span class="string">'pct_change'</span>] = df.close.pct_change()</span><br><span class="line">df.head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>pb</th>      <th>pe</th>      <th>close</th>      <th>pct_change</th>    </tr>    <tr>      <th>date</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2005-01-04</th>      <td>2.01585</td>      <td>26.53715</td>      <td>1242.77</td>      <td>NaN</td>    </tr>    <tr>      <th>2005-02-01</th>      <td>1.86520</td>      <td>24.02880</td>      <td>1188.93</td>      <td>-0.043323</td>    </tr>    <tr>      <th>2005-03-01</th>      <td>2.09300</td>      <td>26.67730</td>      <td>1303.41</td>      <td>0.096288</td>    </tr>    <tr>      <th>2005-04-01</th>      <td>1.86500</td>      <td>25.19810</td>      <td>1223.57</td>      <td>-0.061255</td>    </tr>    <tr>      <th>2005-05-09</th>      <td>1.59800</td>      <td>22.17390</td>      <td>1130.84</td>      <td>-0.075786</td>    </tr>    <tr>      <th>2005-06-01</th>      <td>1.57390</td>      <td>20.97550</td>      <td>1039.19</td>      <td>-0.081046</td>    </tr>    <tr>      <th>2005-07-01</th>      <td>1.55790</td>      <td>21.28340</td>      <td>1055.59</td>      <td>0.015782</td>    </tr>    <tr>      <th>2005-08-01</th>      <td>1.49010</td>      <td>20.81670</td>      <td>1088.95</td>      <td>0.031603</td>    </tr>    <tr>      <th>2005-09-01</th>      <td>1.71190</td>      <td>22.38690</td>      <td>1184.93</td>      <td>0.088140</td>    </tr>    <tr>      <th>2005-10-10</th>      <td>1.69390</td>      <td>22.21185</td>      <td>1138.95</td>      <td>-0.038804</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">miden_estimation = (<span class="number">38.492</span>, <span class="number">49.856</span>)  <span class="comment"># 中等估值的pe区间</span></span><br><span class="line">save_money = []  <span class="comment"># 每月定存</span></span><br><span class="line">back_money = []  <span class="comment"># 回收资金</span></span><br><span class="line">hold_money = []  <span class="comment"># 持仓资金</span></span><br><span class="line">base_money = <span class="number">1000</span>  <span class="comment"># 定投基准</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trade</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(df)):</span><br><span class="line">        pe = df[<span class="string">'pe'</span>][i]  <span class="comment"># 估值位</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:  <span class="comment"># 初始买入</span></span><br><span class="line">            <span class="comment"># 1.计算买入金额</span></span><br><span class="line">            save_money.append(base_money)</span><br><span class="line">            <span class="comment"># 2. 计算回收金额</span></span><br><span class="line">            back_money.append(<span class="number">0</span>)</span><br><span class="line">            <span class="comment"># 3. 计算持仓变化</span></span><br><span class="line">            hold_money.append(base_money)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> pe &lt;= miden_estimation[<span class="number">0</span>]:  <span class="comment"># 执行买入计算</span></span><br><span class="line">            <span class="comment"># 1.计算买入金额</span></span><br><span class="line">            save_money.append(base_money)</span><br><span class="line">            <span class="comment"># 2. 计算回收金额</span></span><br><span class="line">            back_money.append(<span class="number">0</span>)</span><br><span class="line">            <span class="comment"># 3. 计算持仓变化</span></span><br><span class="line">            hold_money.append(hold_money[<span class="number">-1</span>] * (<span class="number">1</span> + df[<span class="string">'pct_change'</span>][i]) + base_money)</span><br><span class="line">        <span class="keyword">elif</span> pe &gt;= miden_estimation[<span class="number">-1</span>]:  <span class="comment"># 执行卖出计算 </span></span><br><span class="line">            <span class="comment"># 1. 计算买入金额</span></span><br><span class="line">            save_money.append(<span class="number">0</span>)</span><br><span class="line">            <span class="comment"># 2. 计算回收金额</span></span><br><span class="line">            back_money.append(base_money)</span><br><span class="line">            <span class="comment"># 3. 计算持仓变化</span></span><br><span class="line">            hold_money.append(hold_money[<span class="number">-1</span>] * (<span class="number">1</span> + df[<span class="string">'pct_change'</span>][i]) - base_money)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 1.计算买入金额</span></span><br><span class="line">            save_money.append(<span class="number">0</span>)</span><br><span class="line">            <span class="comment"># 2. 计算回收金额</span></span><br><span class="line">            back_money.append(<span class="number">0</span>)</span><br><span class="line">            <span class="comment"># 3. 计算持仓变化</span></span><br><span class="line">            hold_money.append(hold_money[<span class="number">-1</span>] * (<span class="number">1</span> + df[<span class="string">'pct_change'</span>][i]))</span><br><span class="line">trade()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'save_money'</span>] = save_money  <span class="comment"># 定投金额</span></span><br><span class="line">df[<span class="string">'save_money_cumsum'</span>] = df[<span class="string">'save_money'</span>].cumsum()  <span class="comment"># 定投累计金额</span></span><br><span class="line">df[<span class="string">'hold_money'</span>] = hold_money  <span class="comment"># 持仓金额</span></span><br><span class="line">df[<span class="string">'back_money'</span>] = back_money  <span class="comment"># 回收金额</span></span><br><span class="line">df[<span class="string">'back_money_cumsum'</span>] = df[<span class="string">'back_money'</span>].cumsum()  <span class="comment"># 累计回收金额</span></span><br><span class="line">df[<span class="string">'total_money'</span>] = df[<span class="string">'hold_money'</span>] + df[<span class="string">'back_money_cumsum'</span>]  <span class="comment"># 总资金</span></span><br><span class="line">df[<span class="string">'return_money'</span>] = df[<span class="string">'total_money'</span>] - df[<span class="string">'save_money_cumsum'</span>]  <span class="comment"># 持续收益</span></span><br><span class="line">df[<span class="string">'return_rate'</span>] = (df[<span class="string">'total_money'</span>] / df[<span class="string">'save_money_cumsum'</span>]) - <span class="number">1</span>  <span class="comment"># 持续收益率</span></span><br><span class="line">df[[<span class="string">'save_money_cumsum'</span>, <span class="string">'total_money'</span>, <span class="string">'back_money_cumsum'</span>, <span class="string">'return_money'</span>]].plot(figsize=(<span class="number">14</span>, <span class="number">7</span>))</span><br><span class="line">plt.legend([<span class="string">'累积定投'</span>, <span class="string">'累计本息'</span>, <span class="string">'回收资金'</span>, <span class="string">'收益曲线'</span>])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'累计投入: &#123;&#125;元'</span>.format(df[<span class="string">'save_money_cumsum'</span>][<span class="number">-1</span>]))</span><br><span class="line">print(<span class="string">'累计收益: &#123;&#125;元'</span>.format(df[<span class="string">'return_money'</span>][<span class="number">-1</span>]))</span><br><span class="line">print(<span class="string">'最终本息累积: &#123;&#125;元'</span>.format(df[<span class="string">'total_money'</span>][<span class="number">-1</span>]))</span><br><span class="line">print(<span class="string">'绝对收益率为: &#123;&#125;%'</span>.format((df[<span class="string">'return_money'</span>][<span class="number">-1</span>] / df[<span class="string">'save_money_cumsum'</span>][<span class="number">-1</span>]) * <span class="number">100</span>))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/mrshiqiqi/resource/lhdt_output_33_0.png" alt=""></p><pre><code>累计投入: 133000元累计收益: 49155.86259384008元最终本息累积: 182155.86259384008元绝对收益率为: 36.95929518333841%</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 展示各年投入金额</span></span><br><span class="line">money_year = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> date <span class="keyword">in</span> df.index:</span><br><span class="line">    year = date.year</span><br><span class="line">    <span class="keyword">if</span> year <span class="keyword">in</span> money_year.keys():</span><br><span class="line">        money_year[year] = money_year[year] + df.loc[date, <span class="string">'save_money'</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        money_year[year] = df.loc[date, <span class="string">'save_money'</span>]</span><br><span class="line">        </span><br><span class="line">money_mean = mean(list(money_year.values()))</span><br><span class="line">years_count = len(money_year) - <span class="number">1</span></span><br><span class="line">money_year = &#123;key: [value] <span class="keyword">for</span> key, value <span class="keyword">in</span> money_year.items()&#125;</span><br><span class="line"></span><br><span class="line">df_money_year = pd.DataFrame(money_year, index=[<span class="string">''</span>])</span><br><span class="line">df_money_year = df_money_year.T</span><br><span class="line">df_money_year.plot(figsize=(<span class="number">14</span>, <span class="number">4</span>), kind=<span class="string">'bar'</span>)</span><br><span class="line">plt.hlines(money_mean, <span class="number">0</span>, years_count, color=<span class="string">'orange'</span>)</span><br><span class="line">plt.legend([<span class="string">'年均投入'</span>, <span class="string">'定投年金'</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/mrshiqiqi/resource/lhdt_output_34_0.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 展示各年的收益</span></span><br><span class="line">return_year = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> date <span class="keyword">in</span> df.index:</span><br><span class="line">    year = date.year</span><br><span class="line">    return_year[year] = df.loc[date, <span class="string">'return_rate'</span>]</span><br><span class="line">return_year = &#123;key: [value] <span class="keyword">for</span> key, value <span class="keyword">in</span> return_year.items()&#125;</span><br><span class="line">return_df = pd.DataFrame(return_year, index=[<span class="string">'return'</span>]).T</span><br><span class="line">return_df[<span class="string">'diff'</span>] = return_df[<span class="string">'return'</span>].diff()</span><br><span class="line">return_df[<span class="string">'diff'</span>].fillna(return_df[<span class="string">'return'</span>], inplace=<span class="literal">True</span>)</span><br><span class="line">return_df[[<span class="string">'diff'</span>]].plot(figsize=(<span class="number">14</span>, <span class="number">4</span>), kind=<span class="string">'bar'</span>)</span><br><span class="line">plt.legend([<span class="string">'各年收益率'</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/mrshiqiqi/resource/lhdt_output_35_0.png" alt=""></p><p>从上面的模型来看，整个投资区间，回收资金过少，即不能很好的在市场上涨的时候将钱落袋为安。</p><p>由于买入与卖出都是按一个基准来操作的，因此，这里设想，是否可以越跌则买的越多，而越涨越卖出得越多呢？</p><p>模拟描述：</p><ol><li>当 PE 处于适中估值区间时，不做任何操作；当月准备的定投金归入回收资金中。</li><li>当 PE 低于适中估值区间时，持续定投；每低一个10%分位，则增加一倍倍投入。</li><li>当 PE 高于适中估值区间时，每高一个10%分位，则增加一倍卖出。在上面分析过程中发现低估值区间是高估值区间的11倍左右，因此，这里还在卖出的原倍数上乘以11.</li></ol><p>本模型不考虑交易费用与滑点，默认每次的投入本金都可以全部买进！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取每个月的第一个交易日</span></span><br><span class="line">first_day = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(df_pe_pb)):</span><br><span class="line">    date = df_pe_pb.index[i]</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">        first_day.append(date)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        last_date = df_pe_pb.index[i - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> date.day &lt; last_date.day:</span><br><span class="line">            first_day.append(date)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按月计算价格与涨跌幅度</span></span><br><span class="line">close = get_price(index, start_date=df_pe_pb.index[<span class="number">0</span>], end_date=df_pe_pb.index[<span class="number">-1</span>])[<span class="string">'close'</span>]</span><br><span class="line">df = df_pe_pb.copy()</span><br><span class="line">df[<span class="string">'close'</span>] = close</span><br><span class="line">df = df.loc[first_day]</span><br><span class="line">df[<span class="string">'pct_change'</span>] = df.close.pct_change()</span><br><span class="line">df.head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>pb</th>      <th>pe</th>      <th>close</th>      <th>pct_change</th>    </tr>    <tr>      <th>date</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2005-01-04</th>      <td>2.01585</td>      <td>26.53715</td>      <td>1242.77</td>      <td>NaN</td>    </tr>    <tr>      <th>2005-02-01</th>      <td>1.86520</td>      <td>24.02880</td>      <td>1188.93</td>      <td>-0.043323</td>    </tr>    <tr>      <th>2005-03-01</th>      <td>2.09300</td>      <td>26.67730</td>      <td>1303.41</td>      <td>0.096288</td>    </tr>    <tr>      <th>2005-04-01</th>      <td>1.86500</td>      <td>25.19810</td>      <td>1223.57</td>      <td>-0.061255</td>    </tr>    <tr>      <th>2005-05-09</th>      <td>1.59800</td>      <td>22.17390</td>      <td>1130.84</td>      <td>-0.075786</td>    </tr>    <tr>      <th>2005-06-01</th>      <td>1.57390</td>      <td>20.97550</td>      <td>1039.19</td>      <td>-0.081046</td>    </tr>    <tr>      <th>2005-07-01</th>      <td>1.55790</td>      <td>21.28340</td>      <td>1055.59</td>      <td>0.015782</td>    </tr>    <tr>      <th>2005-08-01</th>      <td>1.49010</td>      <td>20.81670</td>      <td>1088.95</td>      <td>0.031603</td>    </tr>    <tr>      <th>2005-09-01</th>      <td>1.71190</td>      <td>22.38690</td>      <td>1184.93</td>      <td>0.088140</td>    </tr>    <tr>      <th>2005-10-10</th>      <td>1.69390</td>      <td>22.21185</td>      <td>1138.95</td>      <td>-0.038804</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_how_value</span><span class="params">(pe)</span>:</span></span><br><span class="line">    how_value = [<span class="number">15.708</span>,<span class="number">21.447</span>,<span class="number">27.129</span>,<span class="number">32.811</span>,<span class="number">38.492</span>,<span class="number">44.174</span>,</span><br><span class="line">                <span class="number">49.856</span>,<span class="number">55.538</span>,<span class="number">61.219</span>,<span class="number">66.901</span>,<span class="number">72.583</span>]</span><br><span class="line">    <span class="keyword">for</span> i, value <span class="keyword">in</span> zip(range(<span class="number">0</span>, len(how_value)) , how_value):</span><br><span class="line">        <span class="comment"># zip 包装了整数倍的分位值与对应的pe值区间</span></span><br><span class="line">        <span class="keyword">if</span> how_value[i] &lt;= pe &lt; how_value[i + <span class="number">1</span>]:</span><br><span class="line">            location = i + <span class="number">1</span></span><br><span class="line">            _how_value = <span class="number">5</span> - location  <span class="comment"># 以5为中等值</span></span><br><span class="line">            <span class="keyword">return</span> _how_value  <span class="comment"># 返回基于中位的买入或卖出倍数</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">miden_estimation = (<span class="number">38.492</span>, <span class="number">49.856</span>)  <span class="comment"># 中等估值的pe区间</span></span><br><span class="line">save_money = []  <span class="comment"># 每月定存</span></span><br><span class="line">back_money = []  <span class="comment"># 回收资金</span></span><br><span class="line">hold_money = []  <span class="comment"># 持仓资金</span></span><br><span class="line">base_money = <span class="number">1000</span>  <span class="comment"># 定投基准</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trade</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(df)):</span><br><span class="line">        pe = df[<span class="string">'pe'</span>][i]  <span class="comment"># 估值位</span></span><br><span class="line">        how_value = get_how_value(pe)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:  <span class="comment"># 初始买入</span></span><br><span class="line">            <span class="comment"># 1.计算买入金额</span></span><br><span class="line">            save_money.append(base_money)</span><br><span class="line">            <span class="comment"># 2. 计算回收金额</span></span><br><span class="line">            back_money.append(<span class="number">0</span>)</span><br><span class="line">            <span class="comment"># 3. 计算持仓变化</span></span><br><span class="line">            hold_money.append(base_money)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> how_value &gt; <span class="number">0</span>:  <span class="comment"># 执行买入计算</span></span><br><span class="line">            <span class="comment"># 1.计算买入金额</span></span><br><span class="line">            save_money.append(base_money * how_value)</span><br><span class="line">            <span class="comment"># 2. 计算回收金额</span></span><br><span class="line">            back_money.append(<span class="number">0</span>)</span><br><span class="line">            <span class="comment"># 3. 计算持仓变化</span></span><br><span class="line">            hold_money.append(hold_money[<span class="number">-1</span>] * (<span class="number">1</span> + df[<span class="string">'pct_change'</span>][i]) + base_money * how_value)</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 执行卖出计算 </span></span><br><span class="line">            <span class="comment"># 1. 计算买入金额</span></span><br><span class="line">            save_money.append(<span class="number">0</span>)</span><br><span class="line">            <span class="comment"># 2. 计算回收金额</span></span><br><span class="line">            back_money.append(base_money * -how_value * <span class="number">11</span>)</span><br><span class="line">            <span class="comment"># 3. 计算持仓变化</span></span><br><span class="line">            hold_money.append(hold_money[<span class="number">-1</span>] * (<span class="number">1</span> + df[<span class="string">'pct_change'</span>][i]) - base_money * -how_value * <span class="number">11</span>)</span><br><span class="line">trade()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'save_money'</span>] = save_money  <span class="comment"># 定投金额</span></span><br><span class="line">df[<span class="string">'save_money_cumsum'</span>] = df[<span class="string">'save_money'</span>].cumsum()  <span class="comment"># 定投累计金额</span></span><br><span class="line">df[<span class="string">'hold_money'</span>] = hold_money  <span class="comment"># 持仓金额</span></span><br><span class="line">df[<span class="string">'back_money'</span>] = back_money  <span class="comment"># 回收金额</span></span><br><span class="line">df[<span class="string">'back_money_cumsum'</span>] = df[<span class="string">'back_money'</span>].cumsum()  <span class="comment"># 累计回收金额</span></span><br><span class="line">df[<span class="string">'total_money'</span>] = df[<span class="string">'hold_money'</span>] + df[<span class="string">'back_money_cumsum'</span>]  <span class="comment"># 总资金</span></span><br><span class="line">df[<span class="string">'return_money'</span>] = df[<span class="string">'total_money'</span>] - df[<span class="string">'save_money_cumsum'</span>]  <span class="comment"># 持续收益</span></span><br><span class="line">df[<span class="string">'return_rate'</span>] = (df[<span class="string">'total_money'</span>] / df[<span class="string">'save_money_cumsum'</span>]) - <span class="number">1</span>  <span class="comment"># 持续收益率</span></span><br><span class="line">df[[<span class="string">'save_money_cumsum'</span>, <span class="string">'total_money'</span>, <span class="string">'back_money_cumsum'</span>, <span class="string">'return_money'</span>]].plot(figsize=(<span class="number">14</span>, <span class="number">7</span>))</span><br><span class="line">plt.legend([<span class="string">'累积定投'</span>, <span class="string">'累计本息'</span>, <span class="string">'回收资金'</span>, <span class="string">'收益曲线'</span>])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'累计投入: &#123;&#125;元'</span>.format(df[<span class="string">'save_money_cumsum'</span>][<span class="number">-1</span>]))</span><br><span class="line">print(<span class="string">'累计收益: &#123;&#125;元'</span>.format(df[<span class="string">'return_money'</span>][<span class="number">-1</span>]))</span><br><span class="line">print(<span class="string">'最终本息累积: &#123;&#125;元'</span>.format(df[<span class="string">'total_money'</span>][<span class="number">-1</span>]))</span><br><span class="line">print(<span class="string">'绝对收益率为: &#123;&#125;%'</span>.format((df[<span class="string">'return_money'</span>][<span class="number">-1</span>] / df[<span class="string">'save_money_cumsum'</span>][<span class="number">-1</span>]) * <span class="number">100</span>))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/mrshiqiqi/resource/lhdt_output_40_0.png" alt=""></p><pre><code>累计投入: 319000元累计收益: 288684.23619299044元最终本息累积: 607684.2361929904元绝对收益率为: 90.49662576582772%</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 展示各年投入金额</span></span><br><span class="line">money_year = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> date <span class="keyword">in</span> df.index:</span><br><span class="line">    year = date.year</span><br><span class="line">    <span class="keyword">if</span> year <span class="keyword">in</span> money_year.keys():</span><br><span class="line">        money_year[year] = money_year[year] + df.loc[date, <span class="string">'save_money'</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        money_year[year] = df.loc[date, <span class="string">'save_money'</span>]</span><br><span class="line">        </span><br><span class="line">money_mean = mean(list(money_year.values()))</span><br><span class="line">years_count = len(money_year) - <span class="number">1</span></span><br><span class="line">money_year = &#123;key: [value] <span class="keyword">for</span> key, value <span class="keyword">in</span> money_year.items()&#125;</span><br><span class="line"></span><br><span class="line">df_money_year = pd.DataFrame(money_year, index=[<span class="string">''</span>])</span><br><span class="line">df_money_year = df_money_year.T</span><br><span class="line">df_money_year.plot(figsize=(<span class="number">14</span>, <span class="number">4</span>), kind=<span class="string">'bar'</span>)</span><br><span class="line">plt.hlines(money_mean, <span class="number">0</span>, years_count, color=<span class="string">'orange'</span>)</span><br><span class="line">plt.legend([<span class="string">'年均投入'</span>, <span class="string">'定投年金'</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/mrshiqiqi/resource/lhdt_output_41_0.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 展示各年的收益</span></span><br><span class="line">return_year = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> date <span class="keyword">in</span> df.index:</span><br><span class="line">    year = date.year</span><br><span class="line">    return_year[year] = df.loc[date, <span class="string">'return_rate'</span>]</span><br><span class="line">return_year = &#123;key: [value] <span class="keyword">for</span> key, value <span class="keyword">in</span> return_year.items()&#125;</span><br><span class="line">return_df = pd.DataFrame(return_year, index=[<span class="string">'return'</span>]).T</span><br><span class="line">return_df[<span class="string">'diff'</span>] = return_df[<span class="string">'return'</span>].diff()</span><br><span class="line">return_df[<span class="string">'diff'</span>].fillna(return_df[<span class="string">'return'</span>], inplace=<span class="literal">True</span>)</span><br><span class="line">return_df[[<span class="string">'diff'</span>]].plot(figsize=(<span class="number">14</span>, <span class="number">4</span>), kind=<span class="string">'bar'</span>)</span><br><span class="line">plt.legend([<span class="string">'各年收益率'</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/mrshiqiqi/resource/lhdt_output_42_0.png" alt=""></p><p>模型有了很大的进步，总体说来，资金的增长主要靠的是持续的定投与高位的加倍卖出举动。</p><p>但该模型在使用了从过支到当下计算的估值区间，我们期望可以使用一种动态追踪的估值数字，来指导我们做定投。</p><p>设想：将表态的pe按照近一段时间，来评估当下pe占过去历史百分位的高度，此区间随着时间的移动，一来可以发生动态变化，二来可以不受太旧历史数据的影响。</p><p>那这个历史区间设置多久呢？在上面的计算中，我们发现一个牛熊的运动大概在7.5年左右。因此，我们在这里设置这个时间区间为7.5年。</p><p>来看看依照此方式计算出的结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看动态pe形态的分位趋势图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_quantile</span><span class="params">(index_code, p, n, data)</span>:</span></span><br><span class="line">    <span class="string">"""指数百分位展示。</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        index_code: 指数 code。</span></span><br><span class="line"><span class="string">        p: 可以是 pe，也可以是 pb。</span></span><br><span class="line"><span class="string">        n: 指用于计算指数估值百分位的区间，如果是5指近5年数据。</span></span><br><span class="line"><span class="string">        data: 包含有 pe/pb 的 DataFrame。</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        计算后的DataFrame。</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 这里的计算按一年244个交易日计算</span></span><br><span class="line">    windows = int(n * <span class="number">244</span>)  <span class="comment"># 将时间取整数</span></span><br><span class="line">    _df = data.copy()</span><br><span class="line">    _df.index.name = <span class="literal">None</span></span><br><span class="line">    price = get_price(index_code, start_date=_df.index[<span class="number">0</span>], end_date=_df.index[<span class="number">-1</span>])</span><br><span class="line">    _df[<span class="string">'close'</span>] = price.close</span><br><span class="line">    _df[<span class="string">'quantile'</span>] = _df[p].rolling(windows).apply(<span class="keyword">lambda</span> x: pd.Series(x).rank().iloc[<span class="number">-1</span>] / </span><br><span class="line">                                                  pd.Series(x).shape[<span class="number">0</span>], raw=<span class="literal">True</span>)</span><br><span class="line">    _df.dropna(inplace=<span class="literal">True</span>)</span><br><span class="line">    _df[<span class="string">'quantile'</span>].plot(figsize=(<span class="number">14</span>, <span class="number">7</span>))</span><br><span class="line">    <span class="comment"># 画出适中估值区间</span></span><br><span class="line">    plt.fill_between(_df.index, y1=<span class="number">0.4</span>, y2=<span class="number">0.6</span>, color=<span class="string">'orange'</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line">    plt.annotate(<span class="string">'适中估值区'</span>, (_df.index[<span class="number">-1</span>], <span class="number">0.5</span>))</span><br><span class="line">    <span class="keyword">return</span> _df</span><br><span class="line"><span class="comment"># 展示指数百分位趋势图</span></span><br><span class="line">df_quantile = get_quantile(index, <span class="string">'pe'</span>, <span class="number">7.45</span>, df_pe_pb)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/mrshiqiqi/resource/lhdt_output_44_0.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pe动态分位图与指数高低位的比较</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_quantile</span><span class="params">(index_code, p, n, data)</span>:</span></span><br><span class="line">    <span class="string">"""指数百分位展示。</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        index_code: 指数 code。</span></span><br><span class="line"><span class="string">        p: 可以是 pe，也可以是 pb。</span></span><br><span class="line"><span class="string">        n: 指用于计算指数估值百分位的区间，如果是5指近5年数据。</span></span><br><span class="line"><span class="string">        data: 包含有 pe/pb 的 DataFrame。</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        None.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 这里的计算按一年244个交易日计算</span></span><br><span class="line">    windows = int(n * <span class="number">244</span>)  <span class="comment"># 将时间取整数</span></span><br><span class="line">    _df = data.copy()</span><br><span class="line">    _df.index.name = <span class="literal">None</span></span><br><span class="line">    price = get_price(index_code, start_date=_df.index[<span class="number">0</span>], end_date=_df.index[<span class="number">-1</span>])</span><br><span class="line">    _df[<span class="string">'close'</span>] = price.close</span><br><span class="line">    _df[<span class="string">'quantile'</span>] = _df[p].rolling(windows).apply(<span class="keyword">lambda</span> x: pd.Series(x).rank().iloc[<span class="number">-1</span>] / </span><br><span class="line">                                                  pd.Series(x).shape[<span class="number">0</span>], raw=<span class="literal">True</span>)</span><br><span class="line">    _df.dropna(inplace=<span class="literal">True</span>)</span><br><span class="line">    _df[[<span class="string">'quantile'</span>, <span class="string">'close'</span>]].plot(figsize=(<span class="number">14</span>, <span class="number">10</span>), subplots=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 画出适中估值区间</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 展示指数百分位趋势图</span></span><br><span class="line">show_quantile(index, <span class="string">'pe'</span>, <span class="number">7.5</span>, df_pe_pb)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/mrshiqiqi/resource/lhdt_output_45_0.png" alt=""></p><p>由上我们可以看出，pe近7.5年的动态分位图可以比较恰当的描述指数的高低起伏。</p><p>由此作出以下模型构思。</p><p>模型描述：</p><ol><li>以近7.5年的pe分位来指导定投操作；</li><li>当分位值低于适中估值区间时，按倍增法买入；</li><li>当分位值处于适中估值区间时，不做任何操作；</li><li>当分位值高于适中估值区间时，按照立方指数数倍卖出。</li></ol><p>本模型不考虑交易费用与滑点，默认每次的投入本金都可以全部买进！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取每个月的第一个交易日</span></span><br><span class="line">first_day = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(df_quantile)):</span><br><span class="line">    date = df_quantile.index[i]</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">        first_day.append(date)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        last_date = df_quantile.index[i - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> date.day &lt; last_date.day:</span><br><span class="line">            first_day.append(date)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按月计算价格与涨跌幅度</span></span><br><span class="line">close = get_price(index, start_date=df_quantile.index[<span class="number">0</span>], end_date=df_quantile.index[<span class="number">-1</span>])[<span class="string">'close'</span>]</span><br><span class="line">df = df_quantile.copy()</span><br><span class="line">df[<span class="string">'close'</span>] = close</span><br><span class="line">df = df.loc[first_day]</span><br><span class="line">df[<span class="string">'pct_change'</span>] = df.close.pct_change()</span><br><span class="line">df.head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>pb</th>      <th>pe</th>      <th>close</th>      <th>quantile</th>      <th>pct_change</th>    </tr>  </thead>  <tbody>    <tr>      <th>2012-06-28</th>      <td>2.34595</td>      <td>23.62375</td>      <td>2195.84</td>      <td>0.201431</td>      <td>NaN</td>    </tr>    <tr>      <th>2012-07-02</th>      <td>2.41665</td>      <td>24.12060</td>      <td>2226.11</td>      <td>0.215190</td>      <td>0.013785</td>    </tr>    <tr>      <th>2012-08-01</th>      <td>2.23125</td>      <td>22.63260</td>      <td>2123.36</td>      <td>0.165107</td>      <td>-0.046157</td>    </tr>    <tr>      <th>2012-09-03</th>      <td>2.17690</td>      <td>21.89940</td>      <td>2059.15</td>      <td>0.114474</td>      <td>-0.030240</td>    </tr>    <tr>      <th>2012-10-08</th>      <td>2.20460</td>      <td>21.38255</td>      <td>2074.42</td>      <td>0.088608</td>      <td>0.007416</td>    </tr>    <tr>      <th>2012-11-01</th>      <td>2.16470</td>      <td>21.78270</td>      <td>2104.43</td>      <td>0.116676</td>      <td>0.014467</td>    </tr>    <tr>      <th>2012-12-03</th>      <td>1.82780</td>      <td>18.31150</td>      <td>1959.77</td>      <td>0.010457</td>      <td>-0.068741</td>    </tr>    <tr>      <th>2013-01-04</th>      <td>2.17510</td>      <td>21.58100</td>      <td>2276.99</td>      <td>0.112273</td>      <td>0.161866</td>    </tr>    <tr>      <th>2013-02-01</th>      <td>2.34590</td>      <td>23.32070</td>      <td>2419.02</td>      <td>0.219042</td>      <td>0.062376</td>    </tr>    <tr>      <th>2013-03-01</th>      <td>2.40170</td>      <td>24.69880</td>      <td>2359.51</td>      <td>0.270226</td>      <td>-0.024601</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">save_money = []  <span class="comment"># 每月定存</span></span><br><span class="line">back_money = []  <span class="comment"># 回收资金</span></span><br><span class="line">hold_money = []  <span class="comment"># 持仓资金</span></span><br><span class="line">base_money = <span class="number">1000</span>  <span class="comment"># 定投基准</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trade</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(df)):</span><br><span class="line">        quantile = df[<span class="string">'quantile'</span>][i]  <span class="comment"># 估值位</span></span><br><span class="line">        multiple = int((<span class="number">0.5</span> - quantile) * <span class="number">10</span>)  <span class="comment"># 定投倍数计算</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:  <span class="comment"># 初始买入</span></span><br><span class="line">            <span class="comment"># 1.计算买入金额</span></span><br><span class="line">            _save_money = base_money * multiple</span><br><span class="line">            save_money.append(_save_money)</span><br><span class="line">            <span class="comment"># 2. 计算回收金额</span></span><br><span class="line">            _back_money = <span class="number">0</span></span><br><span class="line">            back_money.append(_back_money)</span><br><span class="line">            <span class="comment"># 3. 计算持仓变化</span></span><br><span class="line">            _hold_money = _save_money</span><br><span class="line">            hold_money.append(_hold_money)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> multiple &gt;=<span class="number">0</span>:  <span class="comment"># 执行买入计算</span></span><br><span class="line">            <span class="comment"># 1.计算买入金额</span></span><br><span class="line">            _save_money = base_money * multiple</span><br><span class="line">            save_money.append(_save_money)</span><br><span class="line">            <span class="comment"># 2. 计算回收金额</span></span><br><span class="line">            _back_money = <span class="number">0</span></span><br><span class="line">            back_money.append(_back_money)</span><br><span class="line">            <span class="comment"># 3. 计算持仓变化</span></span><br><span class="line">            _hold_money = hold_money[<span class="number">-1</span>] * (<span class="number">1</span> + df[<span class="string">'pct_change'</span>][i]) + _save_money</span><br><span class="line">            hold_money.append(_hold_money)</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 执行卖出计算 </span></span><br><span class="line">            <span class="comment"># 1. 计算买入金额</span></span><br><span class="line">            _save_money = <span class="number">0</span></span><br><span class="line">            save_money.append(_save_money)</span><br><span class="line">            <span class="comment"># 2. 计算回收金额</span></span><br><span class="line">            _back_money = base_money * (<span class="number">2</span> ** -multiple)  <span class="comment"># 按2的指数倍卖出</span></span><br><span class="line">            _hold_money = hold_money[<span class="number">-1</span>] * (<span class="number">1</span> + df[<span class="string">'pct_change'</span>][i])</span><br><span class="line">            <span class="keyword">if</span> _back_money &gt; _hold_money:</span><br><span class="line">                _back_money = _hold_money</span><br><span class="line">            <span class="keyword">if</span> quantile &gt;= <span class="number">1.0</span>:</span><br><span class="line">                _back_money = _hold_money  <span class="comment"># 如果达到100%分位，清仓</span></span><br><span class="line">            back_money.append(_back_money)</span><br><span class="line">            <span class="comment"># 3. 计算持仓变化</span></span><br><span class="line">            _hold_money = _hold_money - _back_money</span><br><span class="line">            hold_money.append(_hold_money)</span><br><span class="line">trade()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'save_money'</span>] = save_money  <span class="comment"># 定投金额</span></span><br><span class="line">df[<span class="string">'save_money_cumsum'</span>] = df[<span class="string">'save_money'</span>].cumsum()  <span class="comment"># 定投累计金额</span></span><br><span class="line">df[<span class="string">'hold_money'</span>] = hold_money  <span class="comment"># 持仓金额</span></span><br><span class="line">df[<span class="string">'back_money'</span>] = back_money  <span class="comment"># 回收金额</span></span><br><span class="line">df[<span class="string">'back_money_cumsum'</span>] = df[<span class="string">'back_money'</span>].cumsum()  <span class="comment"># 累计回收金额</span></span><br><span class="line">df[<span class="string">'total_money'</span>] = df[<span class="string">'hold_money'</span>] + df[<span class="string">'back_money_cumsum'</span>]  <span class="comment"># 总资金</span></span><br><span class="line">df[<span class="string">'return_money'</span>] = df[<span class="string">'total_money'</span>] - df[<span class="string">'save_money_cumsum'</span>]  <span class="comment"># 持续收益</span></span><br><span class="line">df[<span class="string">'return_rate'</span>] = (df[<span class="string">'total_money'</span>] / df[<span class="string">'save_money_cumsum'</span>]) - <span class="number">1</span>  <span class="comment"># 持续收益率</span></span><br><span class="line">df[[<span class="string">'save_money_cumsum'</span>, <span class="string">'total_money'</span>, <span class="string">'back_money_cumsum'</span>, <span class="string">'return_money'</span>]].plot(figsize=(<span class="number">14</span>, <span class="number">7</span>))</span><br><span class="line">plt.legend([<span class="string">'累积定投'</span>, <span class="string">'累计本息'</span>, <span class="string">'回收资金'</span>, <span class="string">'收益曲线'</span>])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'累计投入: &#123;&#125;元'</span>.format(df[<span class="string">'save_money_cumsum'</span>][<span class="number">-1</span>]))</span><br><span class="line">print(<span class="string">'累计收益: &#123;&#125;元'</span>.format(df[<span class="string">'return_money'</span>][<span class="number">-1</span>]))</span><br><span class="line">print(<span class="string">'最终本息累积: &#123;&#125;元'</span>.format(df[<span class="string">'total_money'</span>][<span class="number">-1</span>]))</span><br><span class="line">print(<span class="string">'绝对收益率为: &#123;&#125;%'</span>.format((df[<span class="string">'return_money'</span>][<span class="number">-1</span>] / df[<span class="string">'save_money_cumsum'</span>][<span class="number">-1</span>]) * <span class="number">100</span>))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/mrshiqiqi/resource/lhdt_output_49_0.png" alt=""></p><pre><code>累计投入: 99000元累计收益: 77142.48573219407元最终本息累积: 176142.48573219407元绝对收益率为: 77.92170275979198%</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 展示各年投入金额</span></span><br><span class="line">money_year = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> date <span class="keyword">in</span> df.index:</span><br><span class="line">    year = date.year</span><br><span class="line">    <span class="keyword">if</span> year <span class="keyword">in</span> money_year.keys():</span><br><span class="line">        money_year[year] = money_year[year] + df.loc[date, <span class="string">'save_money'</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        money_year[year] = df.loc[date, <span class="string">'save_money'</span>]</span><br><span class="line">        </span><br><span class="line">money_mean = mean(list(money_year.values()))</span><br><span class="line">years_count = len(money_year) - <span class="number">1</span></span><br><span class="line">money_year = &#123;key: [value] <span class="keyword">for</span> key, value <span class="keyword">in</span> money_year.items()&#125;</span><br><span class="line"></span><br><span class="line">df_money_year = pd.DataFrame(money_year, index=[<span class="string">''</span>])</span><br><span class="line">df_money_year = df_money_year.T</span><br><span class="line">df_money_year.plot(figsize=(<span class="number">14</span>, <span class="number">4</span>), kind=<span class="string">'bar'</span>)</span><br><span class="line">plt.hlines(money_mean, <span class="number">0</span>, years_count, color=<span class="string">'orange'</span>)</span><br><span class="line">plt.legend([<span class="string">'年均投入'</span>, <span class="string">'定投年金'</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/mrshiqiqi/resource/lhdt_output_50_0.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 展示各年的收益</span></span><br><span class="line">return_year = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> date <span class="keyword">in</span> df.index:</span><br><span class="line">    year = date.year</span><br><span class="line">    return_year[year] = df.loc[date, <span class="string">'return_rate'</span>]</span><br><span class="line">return_year = &#123;key: [value] <span class="keyword">for</span> key, value <span class="keyword">in</span> return_year.items()&#125;</span><br><span class="line">return_df = pd.DataFrame(return_year, index=[<span class="string">'return'</span>]).T</span><br><span class="line">return_df[<span class="string">'diff'</span>] = return_df[<span class="string">'return'</span>].diff()</span><br><span class="line">return_df[<span class="string">'diff'</span>].fillna(return_df[<span class="string">'return'</span>], inplace=<span class="literal">True</span>)</span><br><span class="line">return_df[[<span class="string">'diff'</span>]].plot(figsize=(<span class="number">14</span>, <span class="number">4</span>), kind=<span class="string">'bar'</span>)</span><br><span class="line">plt.legend([<span class="string">'各年收益率'</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/mrshiqiqi/resource/lhdt_output_51_0.png" alt=""></p><p>由于采用了动态计算pe百分位高度的方式，又牺牲掉了7.5年时间的数据，因此这个模型的数据更少。</p><p>但通过观察，发现整体的收益很可观，再结果文章开始对于下个牛市的展望，我们可以期望在2021年左右，获得一次资产翻倍的机会。</p><p>另外，在定投的过程中，可以将加收的资金买入国债，以增加收益，如果经过了多轮牛熊后，更可以将回收的资金再次投入的下一次的定投中去，以达成在低估值区间买入更多份额的目标。</p><p>由于篇幅有限，这两种情况就不作演算了。</p><p>最后说一点，由于该模型是在历史几个牛熊数据上推理优化而得，因此，这是一个过拟合模型。但为何还要去研究呢？是因为，这一切都建立在指数有效的假设上。即：我们相信，中国的运势会越来越好，指数有低谷，也终将有高潮！</p><p><strong>接下来，我们将上面的模型尝试运用到沪深300指数上，检验一下效果。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">index = <span class="string">'000300.XSHG'</span>  <span class="comment"># 指数 code</span></span><br><span class="line">index_info = get_security_info(index)  <span class="comment"># 指数信息</span></span><br><span class="line">start_date = index_info.start_date  <span class="comment"># 指数开始时间</span></span><br><span class="line">end_date = datetime.datetime.now().date()  <span class="comment"># 以当天为最后一天</span></span><br><span class="line">index_name = index_info.display_name  <span class="comment"># 指数全称</span></span><br><span class="line"></span><br><span class="line">df_pe_pb = get_pe_pb(index, start_date, end_date)</span><br><span class="line">df_pe_pb.head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>pb</th>      <th>pe</th>    </tr>    <tr>      <th>date</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2005-04-08</th>      <td>1.95560</td>      <td>20.30690</td>    </tr>    <tr>      <th>2005-04-11</th>      <td>1.95630</td>      <td>20.27660</td>    </tr>    <tr>      <th>2005-04-12</th>      <td>1.89530</td>      <td>19.94685</td>    </tr>    <tr>      <th>2005-04-13</th>      <td>1.95555</td>      <td>20.39210</td>    </tr>    <tr>      <th>2005-04-14</th>      <td>1.93260</td>      <td>19.93285</td>    </tr>    <tr>      <th>2005-04-15</th>      <td>1.89060</td>      <td>19.65655</td>    </tr>    <tr>      <th>2005-04-18</th>      <td>1.88145</td>      <td>19.49545</td>    </tr>    <tr>      <th>2005-04-19</th>      <td>1.89960</td>      <td>19.96190</td>    </tr>    <tr>      <th>2005-04-20</th>      <td>1.83585</td>      <td>19.86055</td>    </tr>    <tr>      <th>2005-04-21</th>      <td>1.80415</td>      <td>19.57075</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 展示指数百分位趋势图</span></span><br><span class="line">df_quantile = get_quantile(index, <span class="string">'pe'</span>, <span class="number">7.45</span>, df_pe_pb)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/mrshiqiqi/resource/lhdt_output_54_0.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 展示指数百分位趋势图</span></span><br><span class="line">show_quantile(index, <span class="string">'pe'</span>, <span class="number">7.45</span>, df_pe_pb)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/mrshiqiqi/resource/lhdt_output_55_0.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取每个月的第一个交易日</span></span><br><span class="line">first_day = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(df_quantile)):</span><br><span class="line">    date = df_quantile.index[i]</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">        first_day.append(date)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        last_date = df_quantile.index[i - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> date.day &lt; last_date.day:</span><br><span class="line">            first_day.append(date)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按月计算价格与涨跌幅度</span></span><br><span class="line">close = get_price(index, start_date=df_quantile.index[<span class="number">0</span>], end_date=df_quantile.index[<span class="number">-1</span>])[<span class="string">'close'</span>]</span><br><span class="line">df = df_quantile.copy()</span><br><span class="line">df[<span class="string">'close'</span>] = close</span><br><span class="line">df = df.loc[first_day]</span><br><span class="line">df[<span class="string">'pct_change'</span>] = df.close.pct_change()</span><br><span class="line">df.head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>pb</th>      <th>pe</th>      <th>close</th>      <th>quantile</th>      <th>pct_change</th>    </tr>  </thead>  <tbody>    <tr>      <th>2012-09-21</th>      <td>1.93745</td>      <td>17.02400</td>      <td>2199.06</td>      <td>0.106769</td>      <td>NaN</td>    </tr>    <tr>      <th>2012-10-08</th>      <td>1.98520</td>      <td>17.63935</td>      <td>2270.05</td>      <td>0.135113</td>      <td>0.032282</td>    </tr>    <tr>      <th>2012-11-01</th>      <td>1.93975</td>      <td>18.08920</td>      <td>2297.88</td>      <td>0.177766</td>      <td>0.012260</td>    </tr>    <tr>      <th>2012-12-03</th>      <td>1.66340</td>      <td>15.75390</td>      <td>2108.85</td>      <td>0.040726</td>      <td>-0.082263</td>    </tr>    <tr>      <th>2013-01-04</th>      <td>2.10385</td>      <td>18.96275</td>      <td>2524.41</td>      <td>0.261970</td>      <td>0.197055</td>    </tr>    <tr>      <th>2013-02-01</th>      <td>2.22630</td>      <td>20.12825</td>      <td>2743.32</td>      <td>0.329114</td>      <td>0.086717</td>    </tr>    <tr>      <th>2013-03-01</th>      <td>2.20090</td>      <td>20.36475</td>      <td>2668.84</td>      <td>0.344524</td>      <td>-0.027150</td>    </tr>    <tr>      <th>2013-04-01</th>      <td>1.98140</td>      <td>18.83550</td>      <td>2493.19</td>      <td>0.238305</td>      <td>-0.065815</td>    </tr>    <tr>      <th>2013-05-02</th>      <td>1.87415</td>      <td>17.33815</td>      <td>2449.64</td>      <td>0.114474</td>      <td>-0.017468</td>    </tr>    <tr>      <th>2013-06-03</th>      <td>2.00610</td>      <td>18.97265</td>      <td>2602.62</td>      <td>0.238855</td>      <td>0.062450</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">save_money = []  <span class="comment"># 每月定存</span></span><br><span class="line">back_money = []  <span class="comment"># 回收资金</span></span><br><span class="line">hold_money = []  <span class="comment"># 持仓资金</span></span><br><span class="line">base_money = <span class="number">1000</span>  <span class="comment"># 定投基准</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trade</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(df)):</span><br><span class="line">        quantile = df[<span class="string">'quantile'</span>][i]  <span class="comment"># 估值位</span></span><br><span class="line">        multiple = int((<span class="number">0.5</span> - quantile) * <span class="number">10</span>)  <span class="comment"># 定投倍数计算</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:  <span class="comment"># 初始买入</span></span><br><span class="line">            <span class="comment"># 1.计算买入金额</span></span><br><span class="line">            _save_money = base_money * multiple</span><br><span class="line">            save_money.append(_save_money)</span><br><span class="line">            <span class="comment"># 2. 计算回收金额</span></span><br><span class="line">            _back_money = <span class="number">0</span></span><br><span class="line">            back_money.append(_back_money)</span><br><span class="line">            <span class="comment"># 3. 计算持仓变化</span></span><br><span class="line">            _hold_money = _save_money</span><br><span class="line">            hold_money.append(_hold_money)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> multiple &gt;=<span class="number">0</span>:  <span class="comment"># 执行买入计算</span></span><br><span class="line">            <span class="comment"># 1.计算买入金额</span></span><br><span class="line">            _save_money = base_money * multiple</span><br><span class="line">            save_money.append(_save_money)</span><br><span class="line">            <span class="comment"># 2. 计算回收金额</span></span><br><span class="line">            _back_money = <span class="number">0</span></span><br><span class="line">            back_money.append(_back_money)</span><br><span class="line">            <span class="comment"># 3. 计算持仓变化</span></span><br><span class="line">            _hold_money = hold_money[<span class="number">-1</span>] * (<span class="number">1</span> + df[<span class="string">'pct_change'</span>][i]) + _save_money</span><br><span class="line">            hold_money.append(_hold_money)</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 执行卖出计算 </span></span><br><span class="line">            <span class="comment"># 1. 计算买入金额</span></span><br><span class="line">            _save_money = <span class="number">0</span></span><br><span class="line">            save_money.append(_save_money)</span><br><span class="line">            <span class="comment"># 2. 计算回收金额</span></span><br><span class="line">            _back_money = base_money * (<span class="number">2</span> ** -multiple)  <span class="comment"># 按2的指数倍卖出</span></span><br><span class="line">            _hold_money = hold_money[<span class="number">-1</span>] * (<span class="number">1</span> + df[<span class="string">'pct_change'</span>][i])</span><br><span class="line">            <span class="keyword">if</span> _back_money &gt; _hold_money:</span><br><span class="line">                _back_money = _hold_money</span><br><span class="line">            <span class="keyword">if</span> quantile &gt;= <span class="number">1.0</span>:</span><br><span class="line">                _back_money = _hold_money  <span class="comment"># 如果达到100%分位，清仓</span></span><br><span class="line">            back_money.append(_back_money)</span><br><span class="line">            <span class="comment"># 3. 计算持仓变化</span></span><br><span class="line">            _hold_money = _hold_money - _back_money</span><br><span class="line">            hold_money.append(_hold_money)</span><br><span class="line">trade()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'save_money'</span>] = save_money  <span class="comment"># 定投金额</span></span><br><span class="line">df[<span class="string">'save_money_cumsum'</span>] = df[<span class="string">'save_money'</span>].cumsum()  <span class="comment"># 定投累计金额</span></span><br><span class="line">df[<span class="string">'hold_money'</span>] = hold_money  <span class="comment"># 持仓金额</span></span><br><span class="line">df[<span class="string">'back_money'</span>] = back_money  <span class="comment"># 回收金额</span></span><br><span class="line">df[<span class="string">'back_money_cumsum'</span>] = df[<span class="string">'back_money'</span>].cumsum()  <span class="comment"># 累计回收金额</span></span><br><span class="line">df[<span class="string">'total_money'</span>] = df[<span class="string">'hold_money'</span>] + df[<span class="string">'back_money_cumsum'</span>]  <span class="comment"># 总资金</span></span><br><span class="line">df[<span class="string">'return_money'</span>] = df[<span class="string">'total_money'</span>] - df[<span class="string">'save_money_cumsum'</span>]  <span class="comment"># 持续收益</span></span><br><span class="line">df[<span class="string">'return_rate'</span>] = (df[<span class="string">'total_money'</span>] / df[<span class="string">'save_money_cumsum'</span>]) - <span class="number">1</span>  <span class="comment"># 持续收益率</span></span><br><span class="line">df[[<span class="string">'save_money_cumsum'</span>, <span class="string">'total_money'</span>, <span class="string">'back_money_cumsum'</span>, <span class="string">'return_money'</span>]].plot(figsize=(<span class="number">14</span>, <span class="number">7</span>))</span><br><span class="line">plt.legend([<span class="string">'累积定投'</span>, <span class="string">'累计本息'</span>, <span class="string">'回收资金'</span>, <span class="string">'收益曲线'</span>])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'累计投入: &#123;&#125;元'</span>.format(df[<span class="string">'save_money_cumsum'</span>][<span class="number">-1</span>]))</span><br><span class="line">print(<span class="string">'累计收益: &#123;&#125;元'</span>.format(df[<span class="string">'return_money'</span>][<span class="number">-1</span>]))</span><br><span class="line">print(<span class="string">'最终本息累积: &#123;&#125;元'</span>.format(df[<span class="string">'total_money'</span>][<span class="number">-1</span>]))</span><br><span class="line">print(<span class="string">'绝对收益率为: &#123;&#125;%'</span>.format((df[<span class="string">'return_money'</span>][<span class="number">-1</span>] / df[<span class="string">'save_money_cumsum'</span>][<span class="number">-1</span>]) * <span class="number">100</span>))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/mrshiqiqi/resource/lhdt_output_58_0.png" alt=""></p><pre><code>累计投入: 89000元累计收益: 49339.34427308533元最终本息累积: 138339.34427308533元绝对收益率为: 55.43746547537677%</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 展示各年投入金额</span></span><br><span class="line">money_year = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> date <span class="keyword">in</span> df.index:</span><br><span class="line">    year = date.year</span><br><span class="line">    <span class="keyword">if</span> year <span class="keyword">in</span> money_year.keys():</span><br><span class="line">        money_year[year] = money_year[year] + df.loc[date, <span class="string">'save_money'</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        money_year[year] = df.loc[date, <span class="string">'save_money'</span>]</span><br><span class="line">        </span><br><span class="line">money_mean = mean(list(money_year.values()))</span><br><span class="line">years_count = len(money_year) - <span class="number">1</span></span><br><span class="line">money_year = &#123;key: [value] <span class="keyword">for</span> key, value <span class="keyword">in</span> money_year.items()&#125;</span><br><span class="line"></span><br><span class="line">df_money_year = pd.DataFrame(money_year, index=[<span class="string">''</span>])</span><br><span class="line">df_money_year = df_money_year.T</span><br><span class="line">df_money_year.plot(figsize=(<span class="number">14</span>, <span class="number">4</span>), kind=<span class="string">'bar'</span>)</span><br><span class="line">plt.hlines(money_mean, <span class="number">0</span>, years_count, color=<span class="string">'orange'</span>)</span><br><span class="line">plt.legend([<span class="string">'年均投入'</span>, <span class="string">'定投年金'</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/mrshiqiqi/resource/lhdt_output_59_0.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 展示各年的收益</span></span><br><span class="line">return_year = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> date <span class="keyword">in</span> df.index:</span><br><span class="line">    year = date.year</span><br><span class="line">    return_year[year] = df.loc[date, <span class="string">'return_rate'</span>]</span><br><span class="line">return_year = &#123;key: [value] <span class="keyword">for</span> key, value <span class="keyword">in</span> return_year.items()&#125;</span><br><span class="line">return_df = pd.DataFrame(return_year, index=[<span class="string">'return'</span>]).T</span><br><span class="line">return_df[<span class="string">'diff'</span>] = return_df[<span class="string">'return'</span>].diff()</span><br><span class="line">return_df[<span class="string">'diff'</span>].fillna(return_df[<span class="string">'return'</span>], inplace=<span class="literal">True</span>)</span><br><span class="line">return_df[[<span class="string">'diff'</span>]].plot(figsize=(<span class="number">14</span>, <span class="number">4</span>), kind=<span class="string">'bar'</span>)</span><br><span class="line">plt.legend([<span class="string">'各年收益率'</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/mrshiqiqi/resource/lhdt_output_60_0.png" alt=""></p><p>通过以上的模型，我们可以观察到，一个牛熊的时间，投入的资产可以约摸翻一倍。根据72法则（72 / 年化利率 = 资产翻倍时间），得出 <strong>72 / 7.5年 = 9.6%</strong>,即，我们可以期望通过定投实现年化9.6%的年化复利效果。</p><p>作为朝九晚五甚至是996的工薪族来说，这无疑是一个振奋人心的消息。由于没有足够的时间关心投资市场的情况，也没有足够的知识去创建高频的交易模型，通过量化定投，可以每月看一次市场估值，根据百分位而选择适当的金额投入，一来强制自己每月储蓄，二来在时间横向发展过程中，渐渐的壮大资金，7.5年对工薪族来说，是一个恰当而合适的机会！</p><p>定投并不是没有风险的，在投资过程中，就像上图一样，有某些年份是要亏损的，但只要做到耐心等待，合理分投，不盲目跟风，一定会迎一份属于你的惊喜！</p><p><strong>致天下所有奋斗者！</strong></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> 量化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 量化 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KDJ指标在指数上的择时效应</title>
      <link href="/2020/05/04/KDJ%E6%8C%87%E6%A0%87%E5%9C%A8%E6%8C%87%E6%95%B0%E4%B8%8A%E7%9A%84%E6%8B%A9%E6%97%B6%E6%95%88%E5%BA%94/"/>
      <url>/2020/05/04/KDJ%E6%8C%87%E6%A0%87%E5%9C%A8%E6%8C%87%E6%95%B0%E4%B8%8A%E7%9A%84%E6%8B%A9%E6%97%B6%E6%95%88%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""导入常用模块"""</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> environment <span class="keyword">import</span> * <span class="comment"># 导入回测模块</span></span><br></pre></td></tr></table></figure><h3 id="KDJ指标计算函数"><a href="#KDJ指标计算函数" class="headerlink" title="KDJ指标计算函数"></a>KDJ指标计算函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> talib <span class="keyword">as</span> tl</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="comment"># SMA计算函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SMA</span><span class="params">(close, timeperiod)</span> :</span></span><br><span class="line">    close = np.nan_to_num(close)</span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x, y: ((timeperiod - <span class="number">1</span>) * x + y) / timeperiod, close)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># KDJ计算函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">KDJ</span><span class="params">(high, low, close, fastk_period, slowk_period, fastd_period)</span> :</span></span><br><span class="line">    kValue, dValue = tl.STOCHF(high, low, close, fastk_period, fastd_period=<span class="number">1</span>, fastd_matype=<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    kValue = np.array(list(map(<span class="keyword">lambda</span> x : SMA(kValue[:x], slowk_period), range(<span class="number">1</span>, len(kValue) + <span class="number">1</span>))))</span><br><span class="line">    dValue = np.array(list(map(<span class="keyword">lambda</span> x : SMA(kValue[:x], fastd_period), range(<span class="number">1</span>, len(kValue) + <span class="number">1</span>))))</span><br><span class="line">    </span><br><span class="line">    jValue = <span class="number">3</span> * kValue - <span class="number">2</span> * dValue</span><br><span class="line">    </span><br><span class="line">    func = <span class="keyword">lambda</span> arr : np.array([<span class="number">0</span> <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">else</span> (<span class="number">100</span> <span class="keyword">if</span> x &gt; <span class="number">100</span> <span class="keyword">else</span> x) <span class="keyword">for</span> x <span class="keyword">in</span> arr])</span><br><span class="line">    </span><br><span class="line">    kValue = func(kValue)</span><br><span class="line">    dValue = func(dValue)</span><br><span class="line">    jValue = func(jValue)</span><br><span class="line">    <span class="keyword">return</span> kValue, dValue, jValue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取某标的的KDJ信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_kdj</span><span class="params">(stock, count, end_date, unit)</span>:</span></span><br><span class="line">    data = get_bars(security=stock, count=count, unit=unit,</span><br><span class="line">                        include_now=<span class="literal">False</span>, </span><br><span class="line">                        end_dt=end_date, fq_ref_date=<span class="literal">None</span>)</span><br><span class="line">    close = data[<span class="string">'close'</span>]</span><br><span class="line">    open = data[<span class="string">'open'</span>]</span><br><span class="line">    high = data[<span class="string">'high'</span>]</span><br><span class="line">    low = data[<span class="string">'low'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> KDJ(high, low, close, <span class="number">9</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>KDJ的使用方法可以参考：<a href="https://www.joinquant.com/view/community/detail/16464" target="_blank" rel="noopener">https://www.joinquant.com/view/community/detail/16464</a></strong></p><h3 id="KDJ指标使用方法-一"><a href="#KDJ指标使用方法-一" class="headerlink" title="KDJ指标使用方法 一"></a>KDJ指标使用方法 一</h3><p><strong>KDJ是一种摆动指标，20与80的位置是我们对当前超买超卖状态的最基本判断。接下来的择时条件如下：</strong></p><ul><li>当D线处于20位置以下时，买进；</li><li>当D线处于80位置以上时，卖出；</li></ul><p><strong>另外，20与80的位置并不是硬性指标，我们可以为其指定一个浮动范围；我们将这个范围N值定在1%~9%之间，然后做回测，并查看其结果。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">trade_list = []</span><br><span class="line">N =[n/<span class="number">100</span> <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> N:</span><br><span class="line">    <span class="string">"""初始化以下内容"""</span></span><br><span class="line">    context = Context() <span class="comment"># 账户对象</span></span><br><span class="line">    order = Order(context) <span class="comment"># 下单对象</span></span><br><span class="line">    trade = Trade(context, order) <span class="comment"># 回测对旬</span></span><br><span class="line">    context.start_date = <span class="string">'2005-05-01'</span></span><br><span class="line">    context.end_date = <span class="string">'2019-02-22'</span></span><br><span class="line">    context.universe = [<span class="string">'000300.XSHG'</span>]</span><br><span class="line">    context.base = <span class="string">'000300.XSHG'</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""策略主体"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(context, order)</span>:</span></span><br><span class="line">        stock = context.universe[<span class="number">0</span>]</span><br><span class="line">        current_date = trade.context.current_dt</span><br><span class="line">        kdj_day = get_kdj(stock, <span class="number">30</span>, current_date, <span class="string">'1d'</span>)</span><br><span class="line">        </span><br><span class="line">        line_bottm = <span class="number">20</span> * (<span class="number">1</span>+n)</span><br><span class="line">        line_top = <span class="number">80</span> * (<span class="number">1</span>-n)</span><br><span class="line"></span><br><span class="line">        k1 = kdj_day[<span class="number">0</span>][<span class="number">-1</span>]</span><br><span class="line">        d1 = kdj_day[<span class="number">1</span>][<span class="number">-1</span>]</span><br><span class="line">        j1 = kdj_day[<span class="number">2</span>][<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        k2 = kdj_day[<span class="number">0</span>][<span class="number">-2</span>]</span><br><span class="line">        d2 = kdj_day[<span class="number">1</span>][<span class="number">-2</span>]</span><br><span class="line">        j2 = kdj_day[<span class="number">2</span>][<span class="number">-2</span>]</span><br><span class="line"></span><br><span class="line">        close = get_price(security=stock, </span><br><span class="line">                          end_date=context.current_dt,</span><br><span class="line">                          frequency=<span class="string">'daily'</span>, </span><br><span class="line">                          fields=<span class="literal">None</span>, </span><br><span class="line">                          skip_paused=<span class="literal">False</span>, </span><br><span class="line">                          fq=<span class="string">'pre'</span>,</span><br><span class="line">                          count=<span class="number">5</span>)[<span class="string">'close'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> d2 &gt; line_bottm <span class="keyword">and</span> d1 &lt; line_bottm :</span><br><span class="line">            <span class="keyword">if</span> stock <span class="keyword">in</span> context.position.keys():</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            order.buy(stock, close[<span class="number">-1</span>], context.cash // close[<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">elif</span> d2 &lt; line_top <span class="keyword">and</span> d1 &gt; line_top:</span><br><span class="line">            <span class="keyword">if</span> stock <span class="keyword">not</span> <span class="keyword">in</span> context.position.keys():</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            order.sell(stock, close[<span class="number">-1</span>], context.position[stock][<span class="string">'count'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="string">"""执行策略"""</span></span><br><span class="line">    trade.trade(handle, show=<span class="literal">False</span>, log=<span class="literal">True</span>)</span><br><span class="line">    trade_list.append(trade)</span><br><span class="line"><span class="comment"># 展示</span></span><br><span class="line">Trade.show_ratio_compare(<span class="string">'n'</span>, N, trade_list, <span class="number">3</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><pre><code>End Time : 2019-03-10 16:01:27.192853, Elapsed Time: 0:00:18.351210End Time : 2019-03-10 16:01:45.031913, Elapsed Time: 0:00:17.838861End Time : 2019-03-10 16:02:02.843599, Elapsed Time: 0:00:17.811513End Time : 2019-03-10 16:02:20.318987, Elapsed Time: 0:00:17.475214End Time : 2019-03-10 16:02:38.392089, Elapsed Time: 0:00:18.072942End Time : 2019-03-10 16:02:55.567773, Elapsed Time: 0:00:17.175470End Time : 2019-03-10 16:03:13.802732, Elapsed Time: 0:00:18.234765End Time : 2019-03-10 16:03:32.918843, Elapsed Time: 0:00:19.115479End Time : 2019-03-10 16:03:51.401436, Elapsed Time: 0:00:18.482391</code></pre><p><img src="https://cdn.jsdelivr.net/gh/mrshiqiqi/resource/kdj_output_5_1.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Trade.show_result(<span class="string">'n'</span>, N, trade_list)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>alpha</th>      <th>beta</th>      <th>交易次数</th>      <th>回测时间</th>      <th>基准收益</th>      <th>夏普比率</th>      <th>年化收益</th>      <th>最大回撤</th>      <th>盈亏比</th>      <th>策略收益</th>      <th>胜率</th>    </tr>    <tr>      <th>n</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>0.01</th>      <td>-0.088320</td>      <td>0.3854</td>      <td>24</td>      <td>2005-05-01~2019-02-22</td>      <td>2.7662</td>      <td>-4.0289</td>      <td>-0.0237</td>      <td>0.5978</td>      <td>0.6680</td>      <td>-0.2740</td>      <td>0.5417</td>    </tr>    <tr>      <th>0.07</th>      <td>-0.092384</td>      <td>0.3463</td>      <td>27</td>      <td>2005-05-01~2019-02-22</td>      <td>2.7662</td>      <td>-4.1066</td>      <td>-0.0303</td>      <td>0.6063</td>      <td>0.5964</td>      <td>-0.3364</td>      <td>0.5185</td>    </tr>    <tr>      <th>0.08</th>      <td>-0.100810</td>      <td>0.3648</td>      <td>29</td>      <td>2005-05-01~2019-02-22</td>      <td>2.7662</td>      <td>-4.1761</td>      <td>-0.0375</td>      <td>0.6415</td>      <td>0.5394</td>      <td>-0.3995</td>      <td>0.5172</td>    </tr>    <tr>      <th>0.04</th>      <td>-0.100655</td>      <td>0.3468</td>      <td>24</td>      <td>2005-05-01~2019-02-22</td>      <td>2.7662</td>      <td>-4.4318</td>      <td>-0.0385</td>      <td>0.5986</td>      <td>0.4970</td>      <td>-0.4077</td>      <td>0.5417</td>    </tr>    <tr>      <th>0.05</th>      <td>-0.102086</td>      <td>0.3445</td>      <td>25</td>      <td>2005-05-01~2019-02-22</td>      <td>2.7662</td>      <td>-4.3913</td>      <td>-0.0401</td>      <td>0.5986</td>      <td>0.4827</td>      <td>-0.4205</td>      <td>0.5200</td>    </tr>    <tr>      <th>0.02</th>      <td>-0.106029</td>      <td>0.3877</td>      <td>24</td>      <td>2005-05-01~2019-02-22</td>      <td>2.7662</td>      <td>-4.7414</td>      <td>-0.0413</td>      <td>0.5925</td>      <td>0.4860</td>      <td>-0.4300</td>      <td>0.5000</td>    </tr>    <tr>      <th>0.06</th>      <td>-0.106598</td>      <td>0.3604</td>      <td>27</td>      <td>2005-05-01~2019-02-22</td>      <td>2.7662</td>      <td>-4.3707</td>      <td>-0.0436</td>      <td>0.6219</td>      <td>0.4449</td>      <td>-0.4480</td>      <td>0.4444</td>    </tr>    <tr>      <th>0.09</th>      <td>-0.108414</td>      <td>0.3642</td>      <td>29</td>      <td>2005-05-01~2019-02-22</td>      <td>2.7662</td>      <td>-4.3274</td>      <td>-0.0452</td>      <td>0.6370</td>      <td>0.4550</td>      <td>-0.4600</td>      <td>0.5172</td>    </tr>    <tr>      <th>0.03</th>      <td>-0.114031</td>      <td>0.3821</td>      <td>24</td>      <td>2005-05-01~2019-02-22</td>      <td>2.7662</td>      <td>-4.9898</td>      <td>-0.0497</td>      <td>0.6090</td>      <td>0.4252</td>      <td>-0.4928</td>      <td>0.5000</td>    </tr>  </tbody></table></div><p><strong>从上图来看，kdj在超买与超卖区的反应对于沪深300指数来说，反应并不好。</strong></p><h3 id="KDJ使用方法-二"><a href="#KDJ使用方法-二" class="headerlink" title="KDJ使用方法 二"></a>KDJ使用方法 二</h3><ul><li>当k线与d线形成金叉时买进；</li><li>当k线与d线形成死叉时卖出；</li></ul><p><strong>金叉与死叉形成时，最小的时间段是前天与当天的值的比较，这个时间段也可以被当作一种参数D，其取值范围是1~9天。查看回测结果：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">trade_list = []</span><br><span class="line">D = range(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> D:</span><br><span class="line">    <span class="string">"""初始化以下内容"""</span></span><br><span class="line">    context = Context() <span class="comment"># 账户对象</span></span><br><span class="line">    order = Order(context) <span class="comment"># 下单对象</span></span><br><span class="line">    trade = Trade(context, order) <span class="comment"># 回测对旬</span></span><br><span class="line">    context.start_date = <span class="string">'2005-05-01'</span></span><br><span class="line">    context.end_date = <span class="string">'2019-02-22'</span></span><br><span class="line">    context.universe = [<span class="string">'000300.XSHG'</span>]</span><br><span class="line">    context.base = <span class="string">'000300.XSHG'</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""策略主体"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(context, order)</span>:</span></span><br><span class="line">        stock = context.universe[<span class="number">0</span>]</span><br><span class="line">        current_date = trade.context.current_dt</span><br><span class="line">        kdj_day = get_kdj(stock, <span class="number">30</span>, current_date, <span class="string">'1d'</span>)</span><br><span class="line"></span><br><span class="line">        k1 = kdj_day[<span class="number">0</span>][<span class="number">-1</span>]</span><br><span class="line">        d1 = kdj_day[<span class="number">1</span>][<span class="number">-1</span>]</span><br><span class="line">        j1 = kdj_day[<span class="number">2</span>][<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        k2 = kdj_day[<span class="number">0</span>][-d<span class="number">-1</span>]</span><br><span class="line">        d2 = kdj_day[<span class="number">1</span>][-d<span class="number">-1</span>]</span><br><span class="line">        j2 = kdj_day[<span class="number">2</span>][-d<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        close = get_price(security=stock, </span><br><span class="line">                          end_date=context.current_dt,</span><br><span class="line">                          frequency=<span class="string">'daily'</span>, </span><br><span class="line">                          fields=<span class="literal">None</span>, </span><br><span class="line">                          skip_paused=<span class="literal">False</span>, </span><br><span class="line">                          fq=<span class="string">'pre'</span>,</span><br><span class="line">                          count=<span class="number">5</span>)[<span class="string">'close'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> k2 &lt; d2 <span class="keyword">and</span> k1 &gt; d1:</span><br><span class="line">            <span class="keyword">if</span> stock <span class="keyword">in</span> context.position.keys():</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            order.buy(stock, close[<span class="number">-1</span>], context.cash // close[<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">elif</span> k2 &gt; d2 <span class="keyword">and</span> k1 &lt; d1:</span><br><span class="line">            <span class="keyword">if</span> stock <span class="keyword">not</span> <span class="keyword">in</span> context.position.keys():</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            order.sell(stock, close[<span class="number">-1</span>], context.position[stock][<span class="string">'count'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="string">"""执行策略"""</span></span><br><span class="line">    trade.trade(handle, show=<span class="literal">False</span>, log=<span class="literal">True</span>)</span><br><span class="line">    trade_list.append(trade)</span><br><span class="line"><span class="comment"># 展示</span></span><br><span class="line">Trade.show_ratio_compare(<span class="string">'d'</span>, D, trade_list, <span class="number">3</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><pre><code>End Time : 2019-03-10 16:04:13.577469, Elapsed Time: 0:00:20.034098End Time : 2019-03-10 16:04:33.005696, Elapsed Time: 0:00:19.428044End Time : 2019-03-10 16:04:52.154929, Elapsed Time: 0:00:19.149037End Time : 2019-03-10 16:05:12.142793, Elapsed Time: 0:00:19.987659End Time : 2019-03-10 16:05:31.073016, Elapsed Time: 0:00:18.930031End Time : 2019-03-10 16:05:51.557113, Elapsed Time: 0:00:20.483901End Time : 2019-03-10 16:06:10.902478, Elapsed Time: 0:00:19.345159End Time : 2019-03-10 16:06:29.924519, Elapsed Time: 0:00:19.021839End Time : 2019-03-10 16:06:48.871547, Elapsed Time: 0:00:18.946834</code></pre><p><img src="https://cdn.jsdelivr.net/gh/mrshiqiqi/resource/kdj_output_8_1.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Trade.show_result(<span class="string">'d'</span>, D, trade_list)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>alpha</th>      <th>beta</th>      <th>交易次数</th>      <th>回测时间</th>      <th>基准收益</th>      <th>夏普比率</th>      <th>年化收益</th>      <th>最大回撤</th>      <th>盈亏比</th>      <th>策略收益</th>      <th>胜率</th>    </tr>    <tr>      <th>d</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2</th>      <td>0.009414</td>      <td>0.4432</td>      <td>290</td>      <td>2005-05-01~2019-02-22</td>      <td>2.7662</td>      <td>1.6912</td>      <td>0.0777</td>      <td>0.4224</td>      <td>1.1965</td>      <td>1.7096</td>      <td>0.4655</td>    </tr>    <tr>      <th>3</th>      <td>0.008740</td>      <td>0.4325</td>      <td>260</td>      <td>2005-05-01~2019-02-22</td>      <td>2.7662</td>      <td>1.6995</td>      <td>0.0763</td>      <td>0.4995</td>      <td>1.2031</td>      <td>1.6645</td>      <td>0.4846</td>    </tr>    <tr>      <th>1</th>      <td>-0.015884</td>      <td>0.4357</td>      <td>311</td>      <td>2005-05-01~2019-02-22</td>      <td>2.7662</td>      <td>1.4410</td>      <td>0.0519</td>      <td>0.4396</td>      <td>1.1350</td>      <td>0.9625</td>      <td>0.4759</td>    </tr>    <tr>      <th>8</th>      <td>-0.016955</td>      <td>0.4320</td>      <td>191</td>      <td>2005-05-01~2019-02-22</td>      <td>2.7662</td>      <td>1.7708</td>      <td>0.0506</td>      <td>0.6069</td>      <td>1.2340</td>      <td>0.9302</td>      <td>0.5340</td>    </tr>    <tr>      <th>4</th>      <td>-0.024804</td>      <td>0.4273</td>      <td>240</td>      <td>2005-05-01~2019-02-22</td>      <td>2.7662</td>      <td>0.9874</td>      <td>0.0424</td>      <td>0.4962</td>      <td>1.1123</td>      <td>0.7400</td>      <td>0.4708</td>    </tr>    <tr>      <th>5</th>      <td>-0.035541</td>      <td>0.4236</td>      <td>226</td>      <td>2005-05-01~2019-02-22</td>      <td>2.7662</td>      <td>0.6092</td>      <td>0.0315</td>      <td>0.5534</td>      <td>1.0970</td>      <td>0.5111</td>      <td>0.4779</td>    </tr>    <tr>      <th>6</th>      <td>-0.039586</td>      <td>0.4376</td>      <td>209</td>      <td>2005-05-01~2019-02-22</td>      <td>2.7662</td>      <td>0.5555</td>      <td>0.0283</td>      <td>0.5664</td>      <td>1.0921</td>      <td>0.4508</td>      <td>0.4976</td>    </tr>    <tr>      <th>7</th>      <td>-0.042921</td>      <td>0.4295</td>      <td>199</td>      <td>2005-05-01~2019-02-22</td>      <td>2.7662</td>      <td>0.3532</td>      <td>0.0245</td>      <td>0.5844</td>      <td>1.0933</td>      <td>0.3800</td>      <td>0.5075</td>    </tr>    <tr>      <th>9</th>      <td>-0.046487</td>      <td>0.4211</td>      <td>181</td>      <td>2005-05-01~2019-02-22</td>      <td>2.7662</td>      <td>0.0361</td>      <td>0.0204</td>      <td>0.5937</td>      <td>1.0899</td>      <td>0.3082</td>      <td>0.4972</td>    </tr>  </tbody></table></div><p><strong>从上面结果来看，当d=2时回测的效果比较好，但整体看来，仍旧没有跑赢大盘。因此，效果也并不理想。</strong></p><h3 id="KDJ使用方法-三"><a href="#KDJ使用方法-三" class="headerlink" title="KDJ使用方法 三"></a>KDJ使用方法 三</h3><ul><li>当j线与价格发生底背离时，买进；</li><li>当j线与价格发生顶背离时，卖出；</li></ul><p><strong>背离计算的是一段时间内，j线的趋势与价格的趋势在方向上不一致，把时间段设为D值，取值范围是1~9天。回测并查看结果：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">trade_list = []</span><br><span class="line">D = range(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> D:</span><br><span class="line">    <span class="string">"""初始化以下内容"""</span></span><br><span class="line">    context = Context() <span class="comment"># 账户对象</span></span><br><span class="line">    order = Order(context) <span class="comment"># 下单对象</span></span><br><span class="line">    trade = Trade(context, order) <span class="comment"># 回测对旬</span></span><br><span class="line">    context.start_date = <span class="string">'2005-05-01'</span></span><br><span class="line">    context.end_date = <span class="string">'2019-02-22'</span></span><br><span class="line">    context.universe = [<span class="string">'000300.XSHG'</span>]</span><br><span class="line">    context.base = <span class="string">'000300.XSHG'</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""策略主体"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(context, order)</span>:</span></span><br><span class="line">        stock = context.universe[<span class="number">0</span>]</span><br><span class="line">        current_date = trade.context.current_dt</span><br><span class="line">        kdj_day = get_kdj(stock, <span class="number">30</span>, current_date, <span class="string">'1d'</span>)</span><br><span class="line"></span><br><span class="line">        k1 = kdj_day[<span class="number">0</span>][<span class="number">-1</span>]</span><br><span class="line">        d1 = kdj_day[<span class="number">1</span>][<span class="number">-1</span>]</span><br><span class="line">        j1 = kdj_day[<span class="number">2</span>][<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        k2 = kdj_day[<span class="number">0</span>][-d<span class="number">-1</span>]</span><br><span class="line">        d2 = kdj_day[<span class="number">1</span>][-d<span class="number">-1</span>]</span><br><span class="line">        j2 = kdj_day[<span class="number">2</span>][-d<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        close = get_price(security=stock, </span><br><span class="line">                          end_date=context.current_dt,</span><br><span class="line">                          frequency=<span class="string">'daily'</span>, </span><br><span class="line">                          fields=<span class="literal">None</span>, </span><br><span class="line">                          skip_paused=<span class="literal">False</span>, </span><br><span class="line">                          fq=<span class="string">'pre'</span>,</span><br><span class="line">                          count=<span class="number">20</span>)[<span class="string">'close'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> j1 &gt; j2 <span class="keyword">and</span> close[<span class="number">-1</span>] &lt; close[-d<span class="number">-1</span>]:</span><br><span class="line">            <span class="keyword">if</span> stock <span class="keyword">in</span> context.position.keys():</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            order.buy(stock, close[<span class="number">-1</span>], context.cash // close[<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">elif</span> j1 &lt; j2 <span class="keyword">and</span> close[<span class="number">-1</span>] &gt; close[-d<span class="number">-1</span>]:</span><br><span class="line">            <span class="keyword">if</span> stock <span class="keyword">not</span> <span class="keyword">in</span> context.position.keys():</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            order.sell(stock, close[<span class="number">-1</span>], context.position[stock][<span class="string">'count'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="string">"""执行策略"""</span></span><br><span class="line">    trade.trade(handle, show=<span class="literal">False</span>, log=<span class="literal">True</span>)</span><br><span class="line">    trade_list.append(trade)</span><br><span class="line"><span class="comment"># 展示</span></span><br><span class="line">Trade.show_ratio_compare(<span class="string">'d'</span>, D, trade_list, <span class="number">3</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><pre><code>End Time : 2019-03-10 16:07:10.097162, Elapsed Time: 0:00:19.401507End Time : 2019-03-10 16:07:30.041172, Elapsed Time: 0:00:19.943802End Time : 2019-03-10 16:07:51.642053, Elapsed Time: 0:00:21.600708End Time : 2019-03-10 16:08:12.491229, Elapsed Time: 0:00:20.848990End Time : 2019-03-10 16:08:32.879961, Elapsed Time: 0:00:20.388533End Time : 2019-03-10 16:08:53.409177, Elapsed Time: 0:00:20.528626End Time : 2019-03-10 16:09:12.488550, Elapsed Time: 0:00:19.079192End Time : 2019-03-10 16:09:32.450308, Elapsed Time: 0:00:19.961573End Time : 2019-03-10 16:09:52.517584, Elapsed Time: 0:00:20.067092</code></pre><p><img src="https://cdn.jsdelivr.net/gh/mrshiqiqi/resource/kdj_output_11_1.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Trade.show_result(<span class="string">'d'</span>, D, trade_list)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>alpha</th>      <th>beta</th>      <th>交易次数</th>      <th>回测时间</th>      <th>基准收益</th>      <th>夏普比率</th>      <th>年化收益</th>      <th>最大回撤</th>      <th>盈亏比</th>      <th>策略收益</th>      <th>胜率</th>    </tr>    <tr>      <th>d</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>-0.077736</td>      <td>0.4270</td>      <td>451</td>      <td>2005-05-01~2019-02-22</td>      <td>2.7662</td>      <td>-2.0861</td>      <td>-0.0105</td>      <td>0.6100</td>      <td>0.9727</td>      <td>-0.1313</td>      <td>0.6341</td>    </tr>    <tr>      <th>6</th>      <td>-0.110904</td>      <td>0.4822</td>      <td>109</td>      <td>2005-05-01~2019-02-22</td>      <td>2.7662</td>      <td>-4.2251</td>      <td>-0.0402</td>      <td>0.6891</td>      <td>0.7025</td>      <td>-0.4208</td>      <td>0.5688</td>    </tr>    <tr>      <th>3</th>      <td>-0.117829</td>      <td>0.5435</td>      <td>199</td>      <td>2005-05-01~2019-02-22</td>      <td>2.7662</td>      <td>-5.1090</td>      <td>-0.0432</td>      <td>0.6616</td>      <td>0.7790</td>      <td>-0.4446</td>      <td>0.6281</td>    </tr>    <tr>      <th>9</th>      <td>-0.113946</td>      <td>0.4604</td>      <td>81</td>      <td>2005-05-01~2019-02-22</td>      <td>2.7662</td>      <td>-4.6125</td>      <td>-0.0446</td>      <td>0.6432</td>      <td>0.6487</td>      <td>-0.4555</td>      <td>0.5802</td>    </tr>    <tr>      <th>7</th>      <td>-0.116218</td>      <td>0.4692</td>      <td>93</td>      <td>2005-05-01~2019-02-22</td>      <td>2.7662</td>      <td>-4.5738</td>      <td>-0.0463</td>      <td>0.7141</td>      <td>0.6920</td>      <td>-0.4683</td>      <td>0.6237</td>    </tr>    <tr>      <th>8</th>      <td>-0.126615</td>      <td>0.4572</td>      <td>79</td>      <td>2005-05-01~2019-02-22</td>      <td>2.7662</td>      <td>-5.4340</td>      <td>-0.0575</td>      <td>0.6776</td>      <td>0.5574</td>      <td>-0.5455</td>      <td>0.5696</td>    </tr>    <tr>      <th>2</th>      <td>-0.139678</td>      <td>0.4686</td>      <td>279</td>      <td>2005-05-01~2019-02-22</td>      <td>2.7662</td>      <td>-6.1486</td>      <td>-0.0698</td>      <td>0.7485</td>      <td>0.7312</td>      <td>-0.6187</td>      <td>0.5950</td>    </tr>    <tr>      <th>5</th>      <td>-0.157658</td>      <td>0.5356</td>      <td>121</td>      <td>2005-05-01~2019-02-22</td>      <td>2.7662</td>      <td>-6.7588</td>      <td>-0.0835</td>      <td>0.7425</td>      <td>0.5475</td>      <td>-0.6871</td>      <td>0.5785</td>    </tr>    <tr>      <th>4</th>      <td>-0.191193</td>      <td>0.4823</td>      <td>140</td>      <td>2005-05-01~2019-02-22</td>      <td>2.7662</td>      <td>-8.0771</td>      <td>-0.1204</td>      <td>0.8319</td>      <td>0.4296</td>      <td>-0.8192</td>      <td>0.5500</td>    </tr>  </tbody></table></div><p><strong>从上图来看，j线的背离效果也不好，k线与d线的背离效果这里就不做加测了。</strong></p><h3 id="下面展示本次研究效果最好的参数，即金叉与死叉条件下，d-2时的结果。"><a href="#下面展示本次研究效果最好的参数，即金叉与死叉条件下，d-2时的结果。" class="headerlink" title="下面展示本次研究效果最好的参数，即金叉与死叉条件下，d=2时的结果。"></a>下面展示本次研究效果最好的参数，即金叉与死叉条件下，d=2时的结果。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""初始化以下内容"""</span></span><br><span class="line">context = Context() <span class="comment"># 账户对象</span></span><br><span class="line">order = Order(context) <span class="comment"># 下单对象</span></span><br><span class="line">trade = Trade(context, order) <span class="comment"># 回测对旬</span></span><br><span class="line">context.start_date = <span class="string">'2005-05-01'</span></span><br><span class="line">context.end_date = <span class="string">'2019-02-22'</span></span><br><span class="line">context.universe = [<span class="string">'000300.XSHG'</span>]</span><br><span class="line">context.base = <span class="string">'000300.XSHG'</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""策略主体"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(context, order)</span>:</span></span><br><span class="line">    stock = context.universe[<span class="number">0</span>]</span><br><span class="line">    current_date = trade.context.current_dt</span><br><span class="line">    kdj_day = get_kdj(stock, <span class="number">30</span>, current_date, <span class="string">'1d'</span>)</span><br><span class="line"></span><br><span class="line">    k1 = kdj_day[<span class="number">0</span>][<span class="number">-1</span>]</span><br><span class="line">    d1 = kdj_day[<span class="number">1</span>][<span class="number">-1</span>]</span><br><span class="line">    j1 = kdj_day[<span class="number">2</span>][<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    k2 = kdj_day[<span class="number">0</span>][<span class="number">-2</span><span class="number">-1</span>]</span><br><span class="line">    d2 = kdj_day[<span class="number">1</span>][<span class="number">-2</span><span class="number">-1</span>]</span><br><span class="line">    j2 = kdj_day[<span class="number">2</span>][<span class="number">-2</span><span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    close = get_price(security=stock, </span><br><span class="line">                      end_date=context.current_dt,</span><br><span class="line">                      frequency=<span class="string">'daily'</span>, </span><br><span class="line">                      fields=<span class="literal">None</span>, </span><br><span class="line">                      skip_paused=<span class="literal">False</span>, </span><br><span class="line">                      fq=<span class="string">'pre'</span>,</span><br><span class="line">                      count=<span class="number">20</span>)[<span class="string">'close'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> k2 &lt; d2 <span class="keyword">and</span> k1 &gt; d1:</span><br><span class="line">        <span class="keyword">if</span> stock <span class="keyword">in</span> context.position.keys():</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        order.buy(stock, close[<span class="number">-1</span>], context.cash // close[<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">elif</span> k2 &gt; d2 <span class="keyword">and</span> k1 &lt; d1:</span><br><span class="line">        <span class="keyword">if</span> stock <span class="keyword">not</span> <span class="keyword">in</span> context.position.keys():</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        order.sell(stock, close[<span class="number">-1</span>], context.position[stock][<span class="string">'count'</span>])</span><br><span class="line"></span><br><span class="line"><span class="string">"""执行策略"""</span></span><br><span class="line">trade.trade(handle, show=<span class="literal">True</span>, log=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><pre><code>End Time : 2019-03-10 16:11:04.901546, Elapsed Time: 0:00:20.362267</code></pre><p><img src="https://cdn.jsdelivr.net/gh/mrshiqiqi/resource/kdj_output_14_1.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> 量化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 量化 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聚宽回测分析模块</title>
      <link href="/2020/05/04/%E8%81%9A%E5%AE%BD%E5%9B%9E%E6%B5%8B%E5%88%86%E6%9E%90%E6%A8%A1%E5%9D%97/"/>
      <url>/2020/05/04/%E8%81%9A%E5%AE%BD%E5%9B%9E%E6%B5%8B%E5%88%86%E6%9E%90%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p>下面的代码是一个简单的回测模块，数据需要引用聚宽的 jqdata。把下面的代码保存为一个.py 文件，然后上传到聚宽研究根目录下（或者你研究所在文件目录下），然后使用<code>from 文件名 import *</code>，即可导入该模块。</p><p>具体方法请参考：<a href="https://hicoder.com.cn/2020/05/04/KDJ%E6%8C%87%E6%A0%87%E5%9C%A8%E6%8C%87%E6%95%B0%E4%B8%8A%E7%9A%84%E6%8B%A9%E6%97%B6%E6%95%88%E5%BA%94/" target="_blank" rel="noopener">KDJ 指标在指数上的择时效应</a></p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""导入常用模块"""</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> jqdata <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> mpl</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">mpl.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'FangSong'</span>] <span class="comment"># 指定默认字体</span></span><br><span class="line">mpl.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span> <span class="comment"># 解决保存图像是负号'-'显示为方块的问题</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""账户类"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.cash = self.Cash = <span class="number">100000</span> <span class="comment"># 默认初始资金</span></span><br><span class="line">        self.base = <span class="string">'000300.XSHG'</span> <span class="comment"># 默认参考基准</span></span><br><span class="line">        self.position = &#123;&#125; <span class="comment"># 持仓</span></span><br><span class="line">        self.universe = [] <span class="comment"># 标的池</span></span><br><span class="line">        self.current_dt = <span class="string">'2016-01-01'</span></span><br><span class="line">        self.start_date = <span class="string">'2016-01-01'</span> <span class="comment"># 默认交易开始时间</span></span><br><span class="line">        self.end_date = <span class="string">'2016-12-31'</span> <span class="comment"># 默认交易结束时间</span></span><br><span class="line">        self.total_value = <span class="number">0</span> <span class="comment"># 总价值</span></span><br><span class="line">        self.trade_history = [] <span class="comment"># 交易历史记录</span></span><br><span class="line">        self.day_value = [] <span class="comment"># 日收益记录</span></span><br><span class="line">        self.trade_days = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 记录每日收益</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_ratio</span><span class="params">(self, security, date)</span>:</span></span><br><span class="line">        the_value = self.cash</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> self.position.keys():</span><br><span class="line">            <span class="comment"># 计算相对于上个交易日的涨跌幅度</span></span><br><span class="line">            price = get_price(s,</span><br><span class="line">                              end_date=date,</span><br><span class="line">                              frequency=<span class="string">'daily'</span>,</span><br><span class="line">                              fields=[<span class="string">'close'</span>],</span><br><span class="line">                              skip_paused=<span class="literal">False</span>,</span><br><span class="line">                              fq=<span class="string">'pre'</span>,</span><br><span class="line">                              count=<span class="number">10</span>)[<span class="string">'close'</span>]</span><br><span class="line"></span><br><span class="line">            value = self.position[s][<span class="string">'count'</span>]*price[<span class="number">-1</span>]</span><br><span class="line">            the_value += value</span><br><span class="line">        self.day_value.append(&#123;<span class="string">'date'</span>:date, <span class="string">'value'</span>:the_value&#125;)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""下单类"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span>:</span></span><br><span class="line">    context = Context()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, context)</span>:</span></span><br><span class="line">        self.context = context</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 交易函数，买入与卖出</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buy</span><span class="params">(self, security, price, count)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> price * count &gt; self.context.cash:</span><br><span class="line">            print(<span class="string">'资金不足，请调整数量！'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> security <span class="keyword">in</span> self.context.position.keys():</span><br><span class="line">            print(<span class="string">'暂不支持重复下单！'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        _total_value = price * count</span><br><span class="line">        self.context.cash -= _total_value</span><br><span class="line">        _positon = &#123;<span class="string">'security'</span>: security,</span><br><span class="line">                    <span class="string">'price'</span>: price,</span><br><span class="line">                    <span class="string">'count'</span>: count,</span><br><span class="line">                    <span class="string">'date'</span>: self.context.current_dt,</span><br><span class="line">                    <span class="string">'type'</span>: <span class="string">'buy'</span>,</span><br><span class="line">                    <span class="string">'hold_value'</span>: price * count,</span><br><span class="line">                    <span class="string">'available_cash'</span>: self.context.cash&#125;</span><br><span class="line">        self.context.trade_history.append(_positon)</span><br><span class="line">        self.context.total_value = self.context.cash + _total_value</span><br><span class="line">        self.context.position[security] = _positon</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sell</span><span class="params">(self, security, price, count)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> security <span class="keyword">not</span> <span class="keyword">in</span> self.context.position.keys():</span><br><span class="line">            print(<span class="string">'持仓中不包含标的&#123;&#125;，无法交易！'</span>.format(security))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> count != self.context.position[security][<span class="string">'count'</span>]:</span><br><span class="line">            print(<span class="string">'这支持分批卖出，请输入全部数量！'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        _total_value = price * count</span><br><span class="line">        self.context.cash += _total_value</span><br><span class="line">        _positon = &#123;<span class="string">'security'</span>: security,</span><br><span class="line">                    <span class="string">'price'</span>: price,</span><br><span class="line">                    <span class="string">'count'</span>: count,</span><br><span class="line">                    <span class="string">'date'</span>: self.context.current_dt,</span><br><span class="line">                    <span class="string">'type'</span>: <span class="string">'sell'</span>,</span><br><span class="line">                    <span class="string">'hold_value'</span>: price * count,</span><br><span class="line">                    <span class="string">'available_cash'</span>: self.context.cash&#125;</span><br><span class="line">        self.context.trade_history.append(_positon)</span><br><span class="line">        self.context.total_value = self.context.cash  <span class="comment"># ?</span></span><br><span class="line">        <span class="keyword">del</span> self.context.position[security]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""交易类"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trade</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, context, order)</span>:</span></span><br><span class="line">        self.context = context <span class="comment"># 账户</span></span><br><span class="line">        self.order = order <span class="comment"># 下单对象</span></span><br><span class="line">        self.result = &#123;&#125; <span class="comment"># 回测后的评估指标</span></span><br><span class="line">        self.price = <span class="literal">None</span> <span class="comment"># 价格缓存</span></span><br><span class="line">        self.maxdown_point = [] <span class="comment"># 记录最大回撤点位</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 策略回测</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trade</span><span class="params">(self, func, show=True, log=False)</span>:</span></span><br><span class="line">        time_start = datetime.datetime.now()</span><br><span class="line">        self.price = get_price(security=self.context.base,</span><br><span class="line">                              start_date=self.context.start_date,</span><br><span class="line">                              end_date=self.context.end_date,</span><br><span class="line">                              frequency=<span class="string">'daily'</span>,</span><br><span class="line">                              fields=<span class="literal">None</span>,</span><br><span class="line">                              skip_paused=<span class="literal">False</span>,</span><br><span class="line">                              fq=<span class="string">'pre'</span>)</span><br><span class="line">        close = self.price[<span class="string">'close'</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(close)):</span><br><span class="line">            self.context.current_dt = close.index[i]</span><br><span class="line">            self.context.trade_days = i+<span class="number">1</span></span><br><span class="line">            func(self.context, self.order)</span><br><span class="line">            self.context.write_ratio(self.context.universe[<span class="number">0</span>], self.context.current_dt)</span><br><span class="line">        self.get_result()</span><br><span class="line">        time_end = datetime.datetime.now()</span><br><span class="line">        <span class="keyword">if</span> log:</span><br><span class="line">            print(<span class="string">'End Time : &#123;0&#125;, Elapsed Time: &#123;1&#125;'</span>.format(datetime.datetime.now(), time_end - time_start))</span><br><span class="line">        <span class="keyword">if</span> show:</span><br><span class="line">            self.show_ratio()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询交易记录详情</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_trade_detail</span><span class="params">(self)</span>:</span></span><br><span class="line">        _df = pd.DataFrame(self.context.trade_history,</span><br><span class="line">                           columns=[<span class="string">'date'</span>,</span><br><span class="line">                                    <span class="string">'security'</span>,</span><br><span class="line">                                    <span class="string">'type'</span>,</span><br><span class="line">                                    <span class="string">'price'</span>,</span><br><span class="line">                                    <span class="string">'count'</span>,</span><br><span class="line">                                    <span class="string">'hold_value'</span>,</span><br><span class="line">                                    <span class="string">'available_cash'</span>])</span><br><span class="line">        _df.rename(columns=&#123;<span class="string">'date'</span>: <span class="string">'时间'</span>,</span><br><span class="line">                            <span class="string">'security'</span>: <span class="string">'标的'</span>,</span><br><span class="line">                            <span class="string">'type'</span>: <span class="string">'交易类型'</span>,</span><br><span class="line">                            <span class="string">'price'</span>: <span class="string">'交易价格'</span>,</span><br><span class="line">                            <span class="string">'count'</span>: <span class="string">'交易数量'</span>,</span><br><span class="line">                            <span class="string">'hold_value'</span>: <span class="string">'持仓价值'</span>,</span><br><span class="line">                            <span class="string">'available_cash'</span>: <span class="string">'可用资金'</span>&#125;, inplace=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> _df</span><br><span class="line"></span><br><span class="line">    <span class="string">"""评估指标"""</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 策略收益</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_absolute_return</span><span class="params">(self)</span>:</span></span><br><span class="line">        _cash = pd.DataFrame(self.context.day_value)[<span class="string">'value'</span>].iloc[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> (_cash - self.context.Cash) / self.context.Cash</span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    年化收益率公式为：</span></span><br><span class="line"><span class="string">    年化收收益率 = （总收益 + 1）** (365.25/天数) -1  【计算自然日/年化收益率】</span></span><br><span class="line"><span class="string">    年化收收益率 = （总收益 + 1）** (250/天数) -1  【计算交易日/年化收益率】</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 策略年化收益率</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_annualized_return</span><span class="params">(self)</span>:</span></span><br><span class="line">        _cash = pd.DataFrame(self.context.day_value)[<span class="string">'value'</span>].iloc[<span class="number">-1</span>]</span><br><span class="line">        ratio = (_cash - self.context.Cash) / self.context.Cash</span><br><span class="line">        return_value = (<span class="number">1</span> + ratio) ** (<span class="number">252</span> / len(self.context.day_value)) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> return_value</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 基准收益</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_benchmark_return</span><span class="params">(self)</span>:</span></span><br><span class="line">        ben_data = self.price</span><br><span class="line">        benchmark_return = (ben_data[<span class="string">'close'</span>][<span class="number">-1</span>] - ben_data[<span class="string">'open'</span>][<span class="number">0</span>]) / ben_data[<span class="string">'open'</span>][<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> benchmark_return</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 基准年化收益率</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_anbenchmark_return</span><span class="params">(self)</span>:</span></span><br><span class="line">        anbenchmark_return = (<span class="number">1</span> + self.get_benchmark_return()) ** (<span class="number">250</span> / len(self.context.day_value)) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> anbenchmark_return</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算盈亏比</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_profit_loss_than</span><span class="params">(self)</span>:</span></span><br><span class="line">        _df = pd.DataFrame(self.context.trade_history)</span><br><span class="line">        <span class="keyword">if</span> _df.shape[<span class="number">0</span>] &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        _df[<span class="string">'total_value'</span>] = _df[<span class="string">'available_cash'</span>] + _df[<span class="string">'hold_value'</span>]</span><br><span class="line">        _sell = _df[_df[<span class="string">'type'</span>] == <span class="string">'sell'</span>][<span class="string">'available_cash'</span>]</span><br><span class="line">        _trade_count = _df[_df[<span class="string">'type'</span>] == <span class="string">'sell'</span>].shape[<span class="number">0</span>]</span><br><span class="line">        _buy = _df[_df[<span class="string">'type'</span>] == <span class="string">'buy'</span>][<span class="string">'total_value'</span>][<span class="number">0</span>:_trade_count]</span><br><span class="line">        ratio = np.array(_sell) - np.array(_buy)</span><br><span class="line">        <span class="keyword">return</span> abs(ratio[ratio &gt; <span class="number">0</span>].sum()/ratio[ratio &lt; <span class="number">0</span>].sum())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算交易次数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_trade_count</span><span class="params">(self)</span>:</span></span><br><span class="line">        _df = pd.DataFrame(self.context.trade_history)</span><br><span class="line">        <span class="keyword">if</span> _df.shape[<span class="number">0</span>] &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> len(_df[_df[<span class="string">'type'</span>] == <span class="string">'sell'</span>].index)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算胜率</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_wine_rate</span><span class="params">(self)</span>:</span></span><br><span class="line">        _df = pd.DataFrame(self.context.trade_history)</span><br><span class="line">        <span class="keyword">if</span> _df.shape[<span class="number">0</span>] &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        _df[<span class="string">'total_value'</span>] = _df[<span class="string">'available_cash'</span>] + _df[<span class="string">'hold_value'</span>]</span><br><span class="line">        _sell = _df[_df[<span class="string">'type'</span>] == <span class="string">'sell'</span>][<span class="string">'available_cash'</span>]</span><br><span class="line">        _trade_count = _df[_df[<span class="string">'type'</span>] == <span class="string">'sell'</span>].shape[<span class="number">0</span>]</span><br><span class="line">        _buy = _df[_df[<span class="string">'type'</span>] == <span class="string">'buy'</span>][<span class="string">'total_value'</span>][<span class="number">0</span>:_trade_count]</span><br><span class="line">        ratio = np.array(_sell) - np.array(_buy)</span><br><span class="line">        <span class="keyword">return</span> len(ratio[ratio &gt; <span class="number">0</span>])/len(ratio)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 夏普比率</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_sharpe</span><span class="params">(self)</span>:</span></span><br><span class="line">        _df = pd.DataFrame(self.context.day_value)</span><br><span class="line">        <span class="keyword">if</span> _df.shape[<span class="number">0</span>] &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        std = ((_df[<span class="string">'value'</span>] - self.context.Cash) / self.context.Cash).std()</span><br><span class="line">        <span class="keyword">if</span> std == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> (self.get_annualized_return() - <span class="number">0.02</span>) * np.sqrt(<span class="number">252</span>) / std</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># beta</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_beta</span><span class="params">(self)</span>:</span></span><br><span class="line">        ben_data = self.price</span><br><span class="line">        ben_data[<span class="string">'income'</span>] = ben_data[<span class="string">'close'</span>].shift(<span class="number">1</span>)</span><br><span class="line">        ben_data[<span class="string">'income1'</span>] = ben_data[<span class="string">'close'</span>].astype(float) - ben_data[<span class="string">'income'</span>].astype(float)</span><br><span class="line">        ben_data[<span class="string">'income2'</span>] = ben_data[<span class="string">'income1'</span>] / ben_data[<span class="string">'income'</span>]</span><br><span class="line">        ben_data_income = np.array(list(ben_data[<span class="string">'income2'</span>].dropna()))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 策略每日收益</span></span><br><span class="line">        _df = pd.DataFrame(self.context.day_value)</span><br><span class="line">        _df[<span class="string">'income'</span>] = _df[<span class="string">'value'</span>].shift(<span class="number">1</span>)</span><br><span class="line">        _df[<span class="string">'income1'</span>] = _df[<span class="string">'value'</span>].astype(float) - _df[<span class="string">'income'</span>].astype(float)</span><br><span class="line">        _df[<span class="string">'income2'</span>] = _df[<span class="string">'income1'</span>] / _df[<span class="string">'income'</span>] </span><br><span class="line">        _df_income = np.array(list(_df[<span class="string">'income2'</span>].dropna()))</span><br><span class="line"></span><br><span class="line">        x = np.cov(ben_data_income, _df_income)</span><br><span class="line">        y = np.var(ben_data_income)</span><br><span class="line">        <span class="comment"># 获取beta值</span></span><br><span class="line">        x_y_data = round(x[<span class="number">0</span>][<span class="number">1</span>]/y, <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">return</span> x_y_data</span><br><span class="line">            </span><br><span class="line">    <span class="comment"># alpha</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_alpha</span><span class="params">(self)</span>:</span></span><br><span class="line">        alpha_data = self.get_annualized_return() - (<span class="number">0.04</span> + self.get_beta() * (self.get_anbenchmark_return() - <span class="number">0.04</span>))</span><br><span class="line">        <span class="keyword">return</span> alpha_data</span><br><span class="line">    </span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    最大回撤计算方式：</span></span><br><span class="line"><span class="string">    在选定周期内任一历史点往后推，净值下降到最低点时的收益率回撤幅度的最大值。</span></span><br><span class="line"><span class="string">    计算方式有两种：</span></span><br><span class="line"><span class="string">    1. 往前计算，首先计算出每天和前面最高点比的最大回撤：1 - 当天值 / 前面的最大值，然后计算出这些数据里最大的值。</span></span><br><span class="line"><span class="string">    2. 往二计算，首先计算出每天和后面最低点比较的最大回撤：1 - 后面的最小值 / 当天值，然后计算出这些数据里最大值。</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 最大回撤</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_maxdown</span><span class="params">(self)</span>:</span></span><br><span class="line">        _df = pd.DataFrame(self.context.day_value)</span><br><span class="line">        return_list = _df[<span class="string">'value'</span>]</span><br><span class="line">        i = np.argmax((np.maximum.accumulate(return_list) - return_list) / np.maximum.accumulate(return_list))  <span class="comment"># 结束位置</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        j = np.argmax(return_list[:i])  <span class="comment"># 开始位置</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 记录最大回撤的点位</span></span><br><span class="line">        self.maxdown_point.append(_df.iloc[j])</span><br><span class="line">        self.maxdown_point.append(_df.iloc[i])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (return_list[j] - return_list[i]) / (return_list[j])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 总结回测信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_result</span><span class="params">(self)</span>:</span></span><br><span class="line">        _dic = &#123;<span class="string">'基准收益'</span>:round(self.get_benchmark_return(), <span class="number">4</span>),</span><br><span class="line">                <span class="string">'策略收益'</span>:round(self.get_absolute_return(), <span class="number">4</span>),</span><br><span class="line">                <span class="string">'年化收益'</span>:round(self.get_annualized_return(), <span class="number">4</span>),</span><br><span class="line">                <span class="string">'最大回撤'</span>:round(self.get_maxdown(), <span class="number">4</span>),</span><br><span class="line">                <span class="string">'夏普比率'</span>:round(self.get_sharpe(), <span class="number">4</span>),</span><br><span class="line">                <span class="string">'盈亏比'</span>:round(self.get_profit_loss_than(), <span class="number">4</span>),</span><br><span class="line">                <span class="string">'胜率'</span>:round(self.get_wine_rate(), <span class="number">4</span>),</span><br><span class="line">                <span class="string">'交易次数'</span>:self.get_trade_count(),</span><br><span class="line">                <span class="string">'beta'</span>:self.get_beta(),</span><br><span class="line">                <span class="string">'alpha'</span>:self.get_alpha(),</span><br><span class="line">                <span class="string">'回测时间'</span>:self.context.start_date+<span class="string">'~'</span>+self.context.end_date&#125;</span><br><span class="line">        self.result = _dic</span><br><span class="line">        <span class="keyword">return</span> _dic</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 报表展示</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_result</span><span class="params">(index_name, index_list, trade_list)</span>:</span></span><br><span class="line">        _list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(trade_list)):</span><br><span class="line">            _trade = trade_list[i]</span><br><span class="line">            _dic = _trade.result</span><br><span class="line">            _dic[index_name] = index_list[i]</span><br><span class="line">            _list.append(_trade.result)</span><br><span class="line">        _df = pd.DataFrame(_list)</span><br><span class="line">        _df = _df.set_index(index_name)</span><br><span class="line">        _df = _df.sort_values(by=[<span class="string">'年化收益'</span>,<span class="string">'最大回撤'</span>, <span class="string">'alpha'</span>, <span class="string">'夏普比率'</span>, <span class="string">'beta'</span>, <span class="string">'胜率'</span>], </span><br><span class="line">                   ascending=(<span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>))</span><br><span class="line">        <span class="keyword">return</span> _df</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="string">"""图例展示，所有的评估皆以收盘价为基准"""</span> </span><br><span class="line">    <span class="comment"># 展示收益率曲线</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_ratio</span><span class="params">(self, w=<span class="number">20</span>, h=<span class="number">7</span>)</span>:</span></span><br><span class="line">        sns.set()</span><br><span class="line">        _price = self.price</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 大盘相对涨幅</span></span><br><span class="line">        start_price = _price[<span class="string">'close'</span>].iloc[<span class="number">0</span>]</span><br><span class="line">        _price[<span class="string">'dapan_ratio'</span>] = (_price[<span class="string">'close'</span>] - start_price) / start_price</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 策略的相对涨幅</span></span><br><span class="line">        _day_price = pd.DataFrame(self.context.day_value)</span><br><span class="line">        _day_price[<span class="string">'trade_ratio'</span>] = (_day_price[<span class="string">'value'</span>] - self.context.Cash) / self.context.Cash</span><br><span class="line"></span><br><span class="line">        plt.figure(figsize=(w, h))</span><br><span class="line">        <span class="comment"># 收益曲线</span></span><br><span class="line">        plt.plot(_price.index, _price[<span class="string">'dapan_ratio'</span>], linewidth = <span class="string">'2'</span>, color=<span class="string">'#FF4500'</span>)</span><br><span class="line">        plt.plot(_day_price[<span class="string">'date'</span>], _day_price[<span class="string">'trade_ratio'</span>], linewidth = <span class="string">'2'</span>, color=<span class="string">'#1E90FF'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 回撤点位</span></span><br><span class="line">        x_list = [date[<span class="string">'date'</span>] <span class="keyword">for</span> date <span class="keyword">in</span> self.maxdown_point]</span><br><span class="line">        y_list = [(date[<span class="string">'value'</span>] - self.context.Cash) / self.context.Cash <span class="keyword">for</span> date <span class="keyword">in</span> self.maxdown_point]</span><br><span class="line">        plt.scatter(x_list, y_list, c=<span class="string">'g'</span>,linewidths=<span class="number">7</span>, marker=<span class="string">'o'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 评估指标</span></span><br><span class="line">        plt.title(<span class="string">'Benchmark Returns &#123;0&#125;|Total Returns &#123;1&#125;|Annualized Returns &#123;2&#125;|Max Drawdown &#123;3&#125;|RunTime &#123;4&#125;'</span>.format(</span><br><span class="line">            self.result[<span class="string">'基准收益'</span>],</span><br><span class="line">            self.result[<span class="string">'策略收益'</span>],</span><br><span class="line">            self.result[<span class="string">'年化收益'</span>],</span><br><span class="line">            self.result[<span class="string">'最大回撤'</span>],</span><br><span class="line">            self.result[<span class="string">'回测时间'</span>]), fontsize=<span class="number">16</span>)</span><br><span class="line">        plt.grid(<span class="literal">True</span>)</span><br><span class="line">        plt.legend([<span class="string">'Benchmark Returns'</span>, <span class="string">'Total Returns'</span>], loc=<span class="number">2</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">        plt.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查看对比图</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_ratio_compare</span><span class="params">(index_name, index_list, trade_list, r=<span class="number">2</span>, c=<span class="number">2</span>, w=<span class="number">16</span>, h=<span class="number">9</span>)</span>:</span></span><br><span class="line">        <span class="string">"""指标名，指标列表，交易对象列表，绘图行数，绘图列数"""</span></span><br><span class="line">        sns.set()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算一个子图的宽</span></span><br><span class="line">        width = w / c</span><br><span class="line">        <span class="comment"># 计算一个子图的高</span></span><br><span class="line">        high = width*<span class="number">0.56</span></span><br><span class="line"></span><br><span class="line">        figure,ax = plt.subplots(r, c, figsize=(w,(high+<span class="number">0.5</span>)*r))</span><br><span class="line"></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> _ax <span class="keyword">in</span> ax:</span><br><span class="line">            <span class="keyword">for</span> __ax <span class="keyword">in</span> _ax:</span><br><span class="line">                trade = trade_list[j]</span><br><span class="line">                _price = trade.price</span><br><span class="line">                <span class="comment"># 大盘相对涨幅</span></span><br><span class="line">                start_price = _price[<span class="string">'close'</span>].iloc[<span class="number">0</span>]</span><br><span class="line">                _price[<span class="string">'dapan_ratio'</span>] = (_price[<span class="string">'close'</span>] - start_price) / start_price</span><br><span class="line">                <span class="comment"># 策略的相对涨幅</span></span><br><span class="line">                _day_price = pd.DataFrame(trade.context.day_value)</span><br><span class="line">                _day_price[<span class="string">'trade_ratio'</span>] = (_day_price[<span class="string">'value'</span>] - trade.context.Cash) / trade.context.Cash</span><br><span class="line"></span><br><span class="line">                __ax.plot(_price.index, _price[<span class="string">'dapan_ratio'</span>], color=<span class="string">'#FF4500'</span>)</span><br><span class="line">                __ax.plot(_day_price[<span class="string">'date'</span>], _day_price[<span class="string">'trade_ratio'</span>], color=<span class="string">'#1E90FF'</span>)</span><br><span class="line">                __ax.set_title(<span class="string">'&#123;0&#125;=&#123;1&#125;'</span>.format(index_name,index_list[j],), fontsize=<span class="number">14</span>)</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">        plt.show()</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_all_ratio</span><span class="params">(name , ma_list, trade_list, w=<span class="number">16</span>, h=<span class="number">9</span>)</span>:</span></span><br><span class="line">        sns.set()</span><br><span class="line">        </span><br><span class="line">        _legend = [name+<span class="string">'='</span>+str(_ma) <span class="keyword">for</span> _ma <span class="keyword">in</span> ma_list]</span><br><span class="line">        plt.figure(figsize=(w, h))</span><br><span class="line">        <span class="keyword">for</span> trade <span class="keyword">in</span> trade_list:</span><br><span class="line">            _day_price = pd.DataFrame(trade.context.day_value)</span><br><span class="line">            _day_price[<span class="string">'trade_ratio'</span>] = (_day_price[<span class="string">'value'</span>] - trade.context.Cash) / trade.context.Cash</span><br><span class="line">            plt.plot(_day_price[<span class="string">'date'</span>], _day_price[<span class="string">'trade_ratio'</span>])</span><br><span class="line">        plt.legend(_legend)</span><br><span class="line">        plt.show()</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Picture</span>:</span></span><br><span class="line">    <span class="string">"""展示指标图"""</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span>:</span></span><br><span class="line">    <span class="string">"""交易模型，保存量化后的参数"""</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> 量化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 量化 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HiCoder上线啦</title>
      <link href="/2020/05/03/HiCoder%E4%B8%8A%E7%BA%BF%E5%95%A6/"/>
      <url>/2020/05/03/HiCoder%E4%B8%8A%E7%BA%BF%E5%95%A6/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1588525974898&di=d69a885fa954f29866bff7a5aa81b040&imgtype=0&src=http%3A%2F%2Fimg4.imgtn.bdimg.com%2Fit%2Fu%3D3488598319%2C1958457718%26fm%3D214%26gp%3D0.jpg" alt=""></p><a id="more"></a><p>HiCoder 终于和大家见面啦。</p><p>HiCoder 站点很早就搭建好了，但一直没想好要用它来做什么。也许这就是种缘份吧——你遇见一个人，起初不在意，可要分别了才发现难以割舍。我正是怀着这样一种心情，不断的往前摸索，忽然发现 HiCoder 可以为“程序猿”或“码家”们提供一个学习、吐槽和不断精进的基地。</p><p>时代在进步、科技在发展，趴在键盘上敲着代码的年轻人也越来越多，他们只身异地，披星戴月，陪着他们的可能仅有电脑和从来不打电话的手机。有多少人关心过程序员们的内心？有多少人曾关心过他们的身体？他们像也大多数人一样，渴望拥抱，渴望家的温暖，渴望被人倾听……</p><p>也许我也不善言辞，但我想对那些努力的 Coder 们说一句：Hi!</p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
          <category> 公告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转-如何搭建基于Hexo的独立博客</title>
      <link href="/2020/05/01/https://xaoxuu.com/"/>
      <url>/2020/05/01/https://xaoxuu.com/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img.vim-cn.com/d9/a9af7dc49fc0af8ca3e6dd2450a2f7095a87db.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
